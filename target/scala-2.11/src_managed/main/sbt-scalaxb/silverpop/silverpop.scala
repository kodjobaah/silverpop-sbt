// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package silverpop

import scala.concurrent.Future


trait EngageSoapApiClientService_Interface {
  def login(username: String, password: String): Future[silverpop.SessionMgmtResponseType]
  def logout(logout: silverpop.LogoutRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.SessionMgmtResponseType]
  def forwardToFriend(sendeR_EMAIL: String, rs: Option[String], r: Option[Long], m: Long, recipients: String, message: String): Future[silverpop.ForwardToFriendResponseType]
  def sendMailing(mailingId: Long, recipientEmail: String): Future[silverpop.SendMailingResponseType]
  def addRecipient(addRecipient: silverpop.AddRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType]
  def doubleOptIn(doubleOptInRecipient: silverpop.DoubleOptInRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType]
  def updateRecipient(updateRecipient: silverpop.UpdateRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType]
  def optOutRecipient(optOutRecipient: silverpop.OptOutRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType]
  def selectRecipientData(selectRecipientData: silverpop.SelectRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType]
  def trackingMetricExport(trackingMetricExport: silverpop.TrackingMetricExportRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getReportIdByDate(getReportIdByDate: silverpop.GetReportIdByDateRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getSentMailingsForUser(getSentMailingsForUser: silverpop.GetSentMailingsForUserRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getSentMailingsForList(getSentMailingsForList: silverpop.GetSentMailingsForListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def rawRecipientDataExport(rawRecipientDataExport: silverpop.RawRecipientDataExportRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getSentMailingsForOrg(getSentMailingsForOrg: silverpop.GetSentMailingsForOrgRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getAggregateTrackingForMailing(getAggregateTrackingForMailing: silverpop.GetAggregateTrackingForMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getAggregateTrackingForOrg(getAggregateTrackingForOrg: silverpop.GetAggregateTrackingForOrgRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getAggregateTrackingForUser(getAggregateTrackingForUser: silverpop.GetAggregateTrackingForUserRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def getJobStatus(getJobStatus: silverpop.GetJobStatusRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def deleteJob(deleteJob: silverpop.DeleteJobRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType]
  def calculateQuery(calculateQuery: silverpop.CalculateQueryRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def importList(importList: silverpop.ImportListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def importRecipientFieldData(importRecipientFieldData: silverpop.ImportRecipientFieldDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def exportList(exportList: silverpop.ExportListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def getListMetaData(getListMetaData: silverpop.GetListMetaDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def listRecipientMailings(listRecipientMailings: silverpop.ListRecipientMailingsRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def removeRecipient(removeRecipient: silverpop.RemoveRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def getLists(getLists: silverpop.GetListsRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def importTable(importTable: silverpop.ImportTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def joinTable(joinTable: silverpop.JoinTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def exportTable(exportTable: silverpop.ExportTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def deleteTable(deleteTable: silverpop.DeleteTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def createQuery(createQuery: silverpop.CreateQueryRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def scheduleMailing(scheduleMailing: silverpop.ScheduleMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def addDCRuleset(addDCRuleset: silverpop.AddDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def importDCRuleset(importDCRuleset: silverpop.ImportDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def exportDCRuleset(exportDCRuleset: silverpop.ExportDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def listDCRulesetsForMailing(listDCRulesetsForMailing: silverpop.ListDCRulesetsForMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def getDCRuleset(getDCRuleset: silverpop.GetDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def replaceDCRuleset(replaceDCRuleset: silverpop.ReplaceDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def validateDCMailingRuleset(validateDCRuleset: silverpop.ValidateDCMailingRulesetType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def deleteDCRuleset(deleteDCRuleset: silverpop.DeleteDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def exportMailingTemplate(exportMailingTemplate: silverpop.ExportMailingTemplateRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def getMailingTemplates(getMailingTemplates: silverpop.GetMailingTemplatesRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def purgeTable(purgeTable: silverpop.PurgeTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def previewMailing(previewMailing: silverpop.PreviewMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType]
  def addListColumn(addListColumn: silverpop.AddListColumnRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def createTable(createTable: silverpop.CreateTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def insertUpdateRelationalTable(insertUpdateRelationalTable: silverpop.InsertUpdateRelationalTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def deleteRelationalTableData(deleteRelationalTableData: silverpop.DeleteRelationalTableDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def createContactList(createContactList: silverpop.CreateContactListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def addContactToContactList(addContactToContactList: silverpop.AddContactToContactListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
  def addContactToProgram(addContactToProgram: silverpop.AddContactToProgramRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType]
}




