// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package silverpop

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[silverpop.Foo](node)
val document = scalaxb.toXML[silverpop.Foo](obj, "foo", silverpop.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("tns1") -> "SilverpopApi:EngageService.SessionMgmt.Login",
    Some("tns2") -> "SilverpopApi:EngageService.SessionHeader",
    Some("tns3") -> "SilverpopApi:EngageService.MailManagement",
    Some("tns4") -> "SilverpopApi:EngageService.ListMgmt.RecipientActions",
    Some("tns5") -> "SilverpopApi:EngageService.Reporting",
    Some("tns6") -> "SilverpopApi:EngageService.ListMgmt.UserActions",
    Some("tns7") -> "SilverpopApi:EngageService.MailManagement.UserActions",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SilverpopFileEncodingTypeFormat: scalaxb.XMLFormat[silverpop.FileEncodingType] = new DefaultSilverpopFileEncodingTypeFormat {}
  implicit lazy val SilverpopListTypeIdFormat: scalaxb.XMLFormat[silverpop.ListTypeId] = new DefaultSilverpopListTypeIdFormat {}
  implicit lazy val SilverpopListColumnTypeFormat: scalaxb.XMLFormat[silverpop.ListColumnType] = new DefaultSilverpopListColumnTypeFormat {}
  implicit lazy val SilverpopTableColumnTypeFormat: scalaxb.XMLFormat[silverpop.TableColumnType] = new DefaultSilverpopTableColumnTypeFormat {}
  implicit lazy val SilverpopVisibilityTypeFormat: scalaxb.XMLFormat[silverpop.VisibilityType] = new DefaultSilverpopVisibilityTypeFormat {}
  implicit lazy val SilverpopExportTypeFormat: scalaxb.XMLFormat[silverpop.ExportType] = new DefaultSilverpopExportTypeFormat {}
  implicit lazy val SilverpopListTableExportFormatFormat: scalaxb.XMLFormat[silverpop.ListTableExportFormat] = new DefaultSilverpopListTableExportFormatFormat {}
  implicit lazy val SilverpopOptionOperatorFormat: scalaxb.XMLFormat[silverpop.OptionOperator] = new DefaultSilverpopOptionOperatorFormat {}
  implicit lazy val SilverpopTypeOperatorFormat: scalaxb.XMLFormat[silverpop.TypeOperator] = new DefaultSilverpopTypeOperatorFormat {}
  implicit lazy val SilverpopWhereOperatorFormat: scalaxb.XMLFormat[silverpop.WhereOperator] = new DefaultSilverpopWhereOperatorFormat {}
  implicit lazy val SilverpopCriteriaOperatorFormat: scalaxb.XMLFormat[silverpop.CriteriaOperator] = new DefaultSilverpopCriteriaOperatorFormat {}
  implicit lazy val SilverpopCriteriaTypeFormat: scalaxb.XMLFormat[silverpop.CriteriaType] = new DefaultSilverpopCriteriaTypeFormat {}
  implicit lazy val SilverpopExpressionTypeTypeFormat: scalaxb.XMLFormat[silverpop.ExpressionTypeType] = new DefaultSilverpopExpressionTypeTypeFormat {}
  implicit lazy val SilverpopOperatorsTypeFormat: scalaxb.XMLFormat[silverpop.OperatorsType] = new DefaultSilverpopOperatorsTypeFormat {}
  implicit lazy val SilverpopAndOrTypeFormat: scalaxb.XMLFormat[silverpop.AndOrType] = new DefaultSilverpopAndOrTypeFormat {}
  implicit lazy val SilverpopFaultErrorTypeType3Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType3] = new DefaultSilverpopFaultErrorTypeType3Format {}
  implicit lazy val SilverpopFaultErrorTypeType3Sequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType3Sequence1] = new DefaultSilverpopFaultErrorTypeType3Sequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeType3Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType3] = new DefaultSilverpopFaultDetailTypeType3Format {}
  implicit lazy val SilverpopFaultDetailTypeType3Sequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType3Sequence1] = new DefaultSilverpopFaultDetailTypeType3Sequence1Format {}
  implicit lazy val SilverpopFaultTypeType3Format: scalaxb.XMLFormat[silverpop.FaultTypeType3] = new DefaultSilverpopFaultTypeType3Format {}
  implicit lazy val SilverpopFaultTypeType3Sequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeType3Sequence1] = new DefaultSilverpopFaultTypeType3Sequence1Format {}
  implicit lazy val SilverpopImportListRequestTypeFormat: scalaxb.XMLFormat[silverpop.ImportListRequestType] = new DefaultSilverpopImportListRequestTypeFormat {}
  implicit lazy val SilverpopListMgmtUserActionsResponseTypeFormat: scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseType] = new DefaultSilverpopListMgmtUserActionsResponseTypeFormat {}
  implicit lazy val SilverpopListMgmtUserActionsResponseTypeSequence3Format: scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence3] = new DefaultSilverpopListMgmtUserActionsResponseTypeSequence3Format {}
  implicit lazy val SilverpopListMgmtUserActionsResponseTypeSequence2Format: scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence2] = new DefaultSilverpopListMgmtUserActionsResponseTypeSequence2Format {}
  implicit lazy val SilverpopListMgmtUserActionsResponseTypeSequence1Format: scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence1] = new DefaultSilverpopListMgmtUserActionsResponseTypeSequence1Format {}
  implicit lazy val SilverpopListElementTypeFormat: scalaxb.XMLFormat[silverpop.ListElementType] = new DefaultSilverpopListElementTypeFormat {}
  implicit lazy val SilverpopMailingElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.MailingElementTypeType] = new DefaultSilverpopMailingElementTypeTypeFormat {}
  implicit lazy val SilverpopRemoveRecipientRequestTypeFormat: scalaxb.XMLFormat[silverpop.RemoveRecipientRequestType] = new DefaultSilverpopRemoveRecipientRequestTypeFormat {}
  implicit lazy val SilverpopColumnNameValueElementTypeFormat: scalaxb.XMLFormat[silverpop.ColumnNameValueElementType] = new DefaultSilverpopColumnNameValueElementTypeFormat {}
  implicit lazy val SilverpopImportRecipientFieldDataRequestTypeFormat: scalaxb.XMLFormat[silverpop.ImportRecipientFieldDataRequestType] = new DefaultSilverpopImportRecipientFieldDataRequestTypeFormat {}
  implicit lazy val SilverpopExportListRequestTypeFormat: scalaxb.XMLFormat[silverpop.ExportListRequestType] = new DefaultSilverpopExportListRequestTypeFormat {}
  implicit lazy val SilverpopGetListMetaDataRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetListMetaDataRequestType] = new DefaultSilverpopGetListMetaDataRequestTypeFormat {}
  implicit lazy val SilverpopColumnsElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.ColumnsElementTypeType] = new DefaultSilverpopColumnsElementTypeTypeFormat {}
  implicit lazy val SilverpopColumnElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.ColumnElementTypeType] = new DefaultSilverpopColumnElementTypeTypeFormat {}
  implicit lazy val SilverpopTableColumnsElementTypeFormat: scalaxb.XMLFormat[silverpop.TableColumnsElementType] = new DefaultSilverpopTableColumnsElementTypeFormat {}
  implicit lazy val SilverpopTableColumnElementTypeFormat: scalaxb.XMLFormat[silverpop.TableColumnElementType] = new DefaultSilverpopTableColumnElementTypeFormat {}
  implicit lazy val SilverpopRowsElementTypeFormat: scalaxb.XMLFormat[silverpop.RowsElementType] = new DefaultSilverpopRowsElementTypeFormat {}
  implicit lazy val SilverpopRowElementTypeFormat: scalaxb.XMLFormat[silverpop.RowElementType] = new DefaultSilverpopRowElementTypeFormat {}
  implicit lazy val SilverpopRowColumnElementTypeFormat: scalaxb.XMLFormat[silverpop.RowColumnElementType] = new DefaultSilverpopRowColumnElementTypeFormat {}
  implicit lazy val SilverpopDeleteRowsElementTypeFormat: scalaxb.XMLFormat[silverpop.DeleteRowsElementType] = new DefaultSilverpopDeleteRowsElementTypeFormat {}
  implicit lazy val SilverpopDeleteRowElementTypeFormat: scalaxb.XMLFormat[silverpop.DeleteRowElementType] = new DefaultSilverpopDeleteRowElementTypeFormat {}
  implicit lazy val SilverpopColumnNameElementTypeFormat: scalaxb.XMLFormat[silverpop.ColumnNameElementType] = new DefaultSilverpopColumnNameElementTypeFormat {}
  implicit lazy val SilverpopSelectionValuesElementTypeFormat: scalaxb.XMLFormat[silverpop.SelectionValuesElementType] = new DefaultSilverpopSelectionValuesElementTypeFormat {}
  implicit lazy val SilverpopFailuresElementTypeFormat: scalaxb.XMLFormat[silverpop.FailuresElementType] = new DefaultSilverpopFailuresElementTypeFormat {}
  implicit lazy val SilverpopFailureElementTypeFormat: scalaxb.XMLFormat[silverpop.FailureElementType] = new DefaultSilverpopFailureElementTypeFormat {}
  implicit lazy val SilverpopGetListsRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetListsRequestType] = new DefaultSilverpopGetListsRequestTypeFormat {}
  implicit lazy val SilverpopListRecipientMailingsRequestTypeFormat: scalaxb.XMLFormat[silverpop.ListRecipientMailingsRequestType] = new DefaultSilverpopListRecipientMailingsRequestTypeFormat {}
  implicit lazy val SilverpopImportTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.ImportTableRequestType] = new DefaultSilverpopImportTableRequestTypeFormat {}
  implicit lazy val SilverpopJoinTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.JoinTableRequestType] = new DefaultSilverpopJoinTableRequestTypeFormat {}
  implicit lazy val SilverpopMapFieldElementTypeFormat: scalaxb.XMLFormat[silverpop.MapFieldElementType] = new DefaultSilverpopMapFieldElementTypeFormat {}
  implicit lazy val SilverpopExportTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.ExportTableRequestType] = new DefaultSilverpopExportTableRequestTypeFormat {}
  implicit lazy val SilverpopDeleteTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.DeleteTableRequestType] = new DefaultSilverpopDeleteTableRequestTypeFormat {}
  implicit lazy val SilverpopCreateQueryRequestTypeFormat: scalaxb.XMLFormat[silverpop.CreateQueryRequestType] = new DefaultSilverpopCreateQueryRequestTypeFormat {}
  implicit lazy val SilverpopCalculateQueryRequestTypeFormat: scalaxb.XMLFormat[silverpop.CalculateQueryRequestType] = new DefaultSilverpopCalculateQueryRequestTypeFormat {}
  implicit lazy val SilverpopBehaviorElementTypeFormat: scalaxb.XMLFormat[silverpop.BehaviorElementType] = new DefaultSilverpopBehaviorElementTypeFormat {}
  implicit lazy val SilverpopCriteriaElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.CriteriaElementTypeType] = new DefaultSilverpopCriteriaElementTypeTypeFormat {}
  implicit lazy val SilverpopExpressionElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.ExpressionElementTypeType] = new DefaultSilverpopExpressionElementTypeTypeFormat {}
  implicit lazy val SilverpopPurgeTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.PurgeTableRequestType] = new DefaultSilverpopPurgeTableRequestTypeFormat {}
  implicit lazy val SilverpopAddListColumnRequestTypeFormat: scalaxb.XMLFormat[silverpop.AddListColumnRequestType] = new DefaultSilverpopAddListColumnRequestTypeFormat {}
  implicit lazy val SilverpopCreateTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.CreateTableRequestType] = new DefaultSilverpopCreateTableRequestTypeFormat {}
  implicit lazy val SilverpopInsertUpdateRelationalTableRequestTypeFormat: scalaxb.XMLFormat[silverpop.InsertUpdateRelationalTableRequestType] = new DefaultSilverpopInsertUpdateRelationalTableRequestTypeFormat {}
  implicit lazy val SilverpopDeleteRelationalTableDataRequestTypeFormat: scalaxb.XMLFormat[silverpop.DeleteRelationalTableDataRequestType] = new DefaultSilverpopDeleteRelationalTableDataRequestTypeFormat {}
  implicit lazy val SilverpopCreateContactListRequestTypeFormat: scalaxb.XMLFormat[silverpop.CreateContactListRequestType] = new DefaultSilverpopCreateContactListRequestTypeFormat {}
  implicit lazy val SilverpopAddContactToContactListRequestTypeFormat: scalaxb.XMLFormat[silverpop.AddContactToContactListRequestType] = new DefaultSilverpopAddContactToContactListRequestTypeFormat {}
  implicit lazy val SilverpopAddContactToProgramRequestTypeFormat: scalaxb.XMLFormat[silverpop.AddContactToProgramRequestType] = new DefaultSilverpopAddContactToProgramRequestTypeFormat {}
  implicit lazy val SilverpopEmailTypeFormat: scalaxb.XMLFormat[silverpop.EmailType] = new DefaultSilverpopEmailTypeFormat {}
  implicit lazy val SilverpopCreatedFromFormat: scalaxb.XMLFormat[silverpop.CreatedFrom] = new DefaultSilverpopCreatedFromFormat {}
  implicit lazy val SilverpopFaultErrorTypeType4Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType4] = new DefaultSilverpopFaultErrorTypeType4Format {}
  implicit lazy val SilverpopFaultErrorTypeType4Sequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType4Sequence1] = new DefaultSilverpopFaultErrorTypeType4Sequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeType4Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType4] = new DefaultSilverpopFaultDetailTypeType4Format {}
  implicit lazy val SilverpopFaultDetailTypeType4Sequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType4Sequence1] = new DefaultSilverpopFaultDetailTypeType4Sequence1Format {}
  implicit lazy val SilverpopFaultTypeType4Format: scalaxb.XMLFormat[silverpop.FaultTypeType4] = new DefaultSilverpopFaultTypeType4Format {}
  implicit lazy val SilverpopFaultTypeType4Sequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeType4Sequence1] = new DefaultSilverpopFaultTypeType4Sequence1Format {}
  implicit lazy val SilverpopListMgmtResponseTypeFormat: scalaxb.XMLFormat[silverpop.ListMgmtResponseType] = new DefaultSilverpopListMgmtResponseTypeFormat {}
  implicit lazy val SilverpopAddRecipientRequestTypeFormat: scalaxb.XMLFormat[silverpop.AddRecipientRequestType] = new DefaultSilverpopAddRecipientRequestTypeFormat {}
  implicit lazy val SilverpopOptOutRecipientRequestTypeFormat: scalaxb.XMLFormat[silverpop.OptOutRecipientRequestType] = new DefaultSilverpopOptOutRecipientRequestTypeFormat {}
  implicit lazy val SilverpopUpdateRecipientRequestTypeFormat: scalaxb.XMLFormat[silverpop.UpdateRecipientRequestType] = new DefaultSilverpopUpdateRecipientRequestTypeFormat {}
  implicit lazy val SilverpopSelectRecipientRequestTypeFormat: scalaxb.XMLFormat[silverpop.SelectRecipientRequestType] = new DefaultSilverpopSelectRecipientRequestTypeFormat {}
  implicit lazy val SilverpopDoubleOptInRequestTypeFormat: scalaxb.XMLFormat[silverpop.DoubleOptInRequestType] = new DefaultSilverpopDoubleOptInRequestTypeFormat {}
  implicit lazy val SilverpopColumnsElementTypeType2Format: scalaxb.XMLFormat[silverpop.ColumnsElementTypeType2] = new DefaultSilverpopColumnsElementTypeType2Format {}
  implicit lazy val SilverpopContactListsElementTypeFormat: scalaxb.XMLFormat[silverpop.ContactListsElementType] = new DefaultSilverpopContactListsElementTypeFormat {}
  implicit lazy val SilverpopSyncFieldsElementTypeFormat: scalaxb.XMLFormat[silverpop.SyncFieldsElementType] = new DefaultSilverpopSyncFieldsElementTypeFormat {}
  implicit lazy val SilverpopTableColumnsElementTypeTypeFormat: scalaxb.XMLFormat[silverpop.TableColumnsElementTypeType] = new DefaultSilverpopTableColumnsElementTypeTypeFormat {}
  implicit lazy val SilverpopTableElementTypeFormat: scalaxb.XMLFormat[silverpop.TableElementType] = new DefaultSilverpopTableElementTypeFormat {}
  implicit lazy val SilverpopColumnElementTypeType2Format: scalaxb.XMLFormat[silverpop.ColumnElementTypeType2] = new DefaultSilverpopColumnElementTypeType2Format {}
  implicit lazy val SilverpopTablesElementTypeFormat: scalaxb.XMLFormat[silverpop.TablesElementType] = new DefaultSilverpopTablesElementTypeFormat {}
  implicit lazy val SilverpopVisibilityFormat: scalaxb.XMLFormat[silverpop.Visibility] = new DefaultSilverpopVisibilityFormat {}
  implicit lazy val SilverpopTemplateVisibilityFormat: scalaxb.XMLFormat[silverpop.TemplateVisibility] = new DefaultSilverpopTemplateVisibilityFormat {}
  implicit lazy val SilverpopExpressionTypeFormat: scalaxb.XMLFormat[silverpop.ExpressionType] = new DefaultSilverpopExpressionTypeFormat {}
  implicit lazy val SilverpopOperatorsFormat: scalaxb.XMLFormat[silverpop.Operators] = new DefaultSilverpopOperatorsFormat {}
  implicit lazy val SilverpopAndOrFormat: scalaxb.XMLFormat[silverpop.AndOr] = new DefaultSilverpopAndOrFormat {}
  implicit lazy val SilverpopContentAreaTypeFormat: scalaxb.XMLFormat[silverpop.ContentAreaType] = new DefaultSilverpopContentAreaTypeFormat {}
  implicit lazy val SilverpopSendTimeOptimizationFormat: scalaxb.XMLFormat[silverpop.SendTimeOptimization] = new DefaultSilverpopSendTimeOptimizationFormat {}
  implicit lazy val SilverpopFaultErrorTypeType2Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType2] = new DefaultSilverpopFaultErrorTypeType2Format {}
  implicit lazy val SilverpopFaultErrorTypeType2Sequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType2Sequence1] = new DefaultSilverpopFaultErrorTypeType2Sequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeType2Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType2] = new DefaultSilverpopFaultDetailTypeType2Format {}
  implicit lazy val SilverpopFaultDetailTypeType2Sequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType2Sequence1] = new DefaultSilverpopFaultDetailTypeType2Sequence1Format {}
  implicit lazy val SilverpopFaultTypeType2Format: scalaxb.XMLFormat[silverpop.FaultTypeType2] = new DefaultSilverpopFaultTypeType2Format {}
  implicit lazy val SilverpopFaultTypeType2Sequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeType2Sequence1] = new DefaultSilverpopFaultTypeType2Sequence1Format {}
  implicit lazy val SilverpopScheduleMailingRequestTypeFormat: scalaxb.XMLFormat[silverpop.ScheduleMailingRequestType] = new DefaultSilverpopScheduleMailingRequestTypeFormat {}
  implicit lazy val SilverpopPreviewMailingRequestTypeFormat: scalaxb.XMLFormat[silverpop.PreviewMailingRequestType] = new DefaultSilverpopPreviewMailingRequestTypeFormat {}
  implicit lazy val SilverpopMailMgmtUserActionsResponseTypeFormat: scalaxb.XMLFormat[silverpop.MailMgmtUserActionsResponseType] = new DefaultSilverpopMailMgmtUserActionsResponseTypeFormat {}
  implicit lazy val SilverpopSuppressionListsElementTypeFormat: scalaxb.XMLFormat[silverpop.SuppressionListsElementType] = new DefaultSilverpopSuppressionListsElementTypeFormat {}
  implicit lazy val SilverpopSubstitutionsElementTypeFormat: scalaxb.XMLFormat[silverpop.SubstitutionsElementType] = new DefaultSilverpopSubstitutionsElementTypeFormat {}
  implicit lazy val SilverpopSubstitutionElementTypeFormat: scalaxb.XMLFormat[silverpop.SubstitutionElementType] = new DefaultSilverpopSubstitutionElementTypeFormat {}
  implicit lazy val SilverpopAddDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.AddDCRulesetRequestType] = new DefaultSilverpopAddDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopContentAreasElementTypeFormat: scalaxb.XMLFormat[silverpop.ContentAreasElementType] = new DefaultSilverpopContentAreasElementTypeFormat {}
  implicit lazy val SilverpopContentAreaElementTypeFormat: scalaxb.XMLFormat[silverpop.ContentAreaElementType] = new DefaultSilverpopContentAreaElementTypeFormat {}
  implicit lazy val SilverpopDefaultContentElementTypeFormat: scalaxb.XMLFormat[silverpop.DefaultContentElementType] = new DefaultSilverpopDefaultContentElementTypeFormat {}
  implicit lazy val SilverpopRulesElementTypeFormat: scalaxb.XMLFormat[silverpop.RulesElementType] = new DefaultSilverpopRulesElementTypeFormat {}
  implicit lazy val SilverpopRuleElementTypeFormat: scalaxb.XMLFormat[silverpop.RuleElementType] = new DefaultSilverpopRuleElementTypeFormat {}
  implicit lazy val SilverpopCriteriaElementTypeFormat: scalaxb.XMLFormat[silverpop.CriteriaElementType] = new DefaultSilverpopCriteriaElementTypeFormat {}
  implicit lazy val SilverpopExpressionElementTypeFormat: scalaxb.XMLFormat[silverpop.ExpressionElementType] = new DefaultSilverpopExpressionElementTypeFormat {}
  implicit lazy val SilverpopContentsElementTypeFormat: scalaxb.XMLFormat[silverpop.ContentsElementType] = new DefaultSilverpopContentsElementTypeFormat {}
  implicit lazy val SilverpopContentElementTypeFormat: scalaxb.XMLFormat[silverpop.ContentElementType] = new DefaultSilverpopContentElementTypeFormat {}
  implicit lazy val SilverpopImportDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.ImportDCRulesetRequestType] = new DefaultSilverpopImportDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopExportDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.ExportDCRulesetRequestType] = new DefaultSilverpopExportDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopListDCRulesetsForMailingRequestTypeFormat: scalaxb.XMLFormat[silverpop.ListDCRulesetsForMailingRequestType] = new DefaultSilverpopListDCRulesetsForMailingRequestTypeFormat {}
  implicit lazy val SilverpopRulesetElementTypeFormat: scalaxb.XMLFormat[silverpop.RulesetElementType] = new DefaultSilverpopRulesetElementTypeFormat {}
  implicit lazy val SilverpopGetDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetDCRulesetRequestType] = new DefaultSilverpopGetDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopReplaceDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.ReplaceDCRulesetRequestType] = new DefaultSilverpopReplaceDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopValidateDCMailingRulesetTypeFormat: scalaxb.XMLFormat[silverpop.ValidateDCMailingRulesetType] = new DefaultSilverpopValidateDCMailingRulesetTypeFormat {}
  implicit lazy val SilverpopDeleteDCRulesetRequestTypeFormat: scalaxb.XMLFormat[silverpop.DeleteDCRulesetRequestType] = new DefaultSilverpopDeleteDCRulesetRequestTypeFormat {}
  implicit lazy val SilverpopExportMailingTemplateRequestTypeFormat: scalaxb.XMLFormat[silverpop.ExportMailingTemplateRequestType] = new DefaultSilverpopExportMailingTemplateRequestTypeFormat {}
  implicit lazy val SilverpopGetMailingTemplatesRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetMailingTemplatesRequestType] = new DefaultSilverpopGetMailingTemplatesRequestTypeFormat {}
  implicit lazy val SilverpopMailingTemplateElementTypeFormat: scalaxb.XMLFormat[silverpop.MailingTemplateElementType] = new DefaultSilverpopMailingTemplateElementTypeFormat {}
  implicit lazy val SilverpopFaultErrorTypeType5Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType5] = new DefaultSilverpopFaultErrorTypeType5Format {}
  implicit lazy val SilverpopFaultErrorTypeType5Sequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeType5Sequence1] = new DefaultSilverpopFaultErrorTypeType5Sequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeType5Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType5] = new DefaultSilverpopFaultDetailTypeType5Format {}
  implicit lazy val SilverpopFaultDetailTypeType5Sequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeType5Sequence1] = new DefaultSilverpopFaultDetailTypeType5Sequence1Format {}
  implicit lazy val SilverpopFaultTypeType5Format: scalaxb.XMLFormat[silverpop.FaultTypeType5] = new DefaultSilverpopFaultTypeType5Format {}
  implicit lazy val SilverpopFaultTypeType5Sequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeType5Sequence1] = new DefaultSilverpopFaultTypeType5Sequence1Format {}
  implicit lazy val SilverpopSendMailingRequestTypeFormat: scalaxb.XMLFormat[silverpop.SendMailingRequestType] = new DefaultSilverpopSendMailingRequestTypeFormat {}
  implicit lazy val SilverpopSendMailingResponseTypeFormat: scalaxb.XMLFormat[silverpop.SendMailingResponseType] = new DefaultSilverpopSendMailingResponseTypeFormat {}
  implicit lazy val SilverpopForwardToFriendRequestTypeFormat: scalaxb.XMLFormat[silverpop.ForwardToFriendRequestType] = new DefaultSilverpopForwardToFriendRequestTypeFormat {}
  implicit lazy val SilverpopForwardToFriendResponseTypeFormat: scalaxb.XMLFormat[silverpop.ForwardToFriendResponseType] = new DefaultSilverpopForwardToFriendResponseTypeFormat {}
  implicit lazy val SilverpopFileEncodingFormat: scalaxb.XMLFormat[silverpop.FileEncoding] = new DefaultSilverpopFileEncodingFormat {}
  implicit lazy val SilverpopEventExportFormatFormat: scalaxb.XMLFormat[silverpop.EventExportFormat] = new DefaultSilverpopEventExportFormatFormat {}
  implicit lazy val SilverpopPrivateSharedFormat: scalaxb.XMLFormat[silverpop.PrivateShared] = new DefaultSilverpopPrivateSharedFormat {}
  implicit lazy val SilverpopJobStatusFormat: scalaxb.XMLFormat[silverpop.JobStatus] = new DefaultSilverpopJobStatusFormat {}
  implicit lazy val SilverpopMetricsExportFormatFormat: scalaxb.XMLFormat[silverpop.MetricsExportFormat] = new DefaultSilverpopMetricsExportFormatFormat {}
  implicit lazy val SilverpopFaultErrorTypeTypeFormat: scalaxb.XMLFormat[silverpop.FaultErrorTypeType] = new DefaultSilverpopFaultErrorTypeTypeFormat {}
  implicit lazy val SilverpopFaultErrorTypeTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeTypeSequence1] = new DefaultSilverpopFaultErrorTypeTypeSequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeTypeFormat: scalaxb.XMLFormat[silverpop.FaultDetailTypeType] = new DefaultSilverpopFaultDetailTypeTypeFormat {}
  implicit lazy val SilverpopFaultDetailTypeTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeTypeSequence1] = new DefaultSilverpopFaultDetailTypeTypeSequence1Format {}
  implicit lazy val SilverpopFaultTypeTypeFormat: scalaxb.XMLFormat[silverpop.FaultTypeType] = new DefaultSilverpopFaultTypeTypeFormat {}
  implicit lazy val SilverpopFaultTypeTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeTypeSequence1] = new DefaultSilverpopFaultTypeTypeSequence1Format {}
  implicit lazy val SilverpopTrackingMetricExportRequestTypeFormat: scalaxb.XMLFormat[silverpop.TrackingMetricExportRequestType] = new DefaultSilverpopTrackingMetricExportRequestTypeFormat {}
  implicit lazy val SilverpopGetReportIdByDateRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetReportIdByDateRequestType] = new DefaultSilverpopGetReportIdByDateRequestTypeFormat {}
  implicit lazy val SilverpopGetSentMailingsForUserRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetSentMailingsForUserRequestType] = new DefaultSilverpopGetSentMailingsForUserRequestTypeFormat {}
  implicit lazy val SilverpopGetSentMailingsForListRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetSentMailingsForListRequestType] = new DefaultSilverpopGetSentMailingsForListRequestTypeFormat {}
  implicit lazy val SilverpopColumnsElementTypeFormat: scalaxb.XMLFormat[silverpop.ColumnsElementType] = new DefaultSilverpopColumnsElementTypeFormat {}
  implicit lazy val SilverpopColumnElementTypeFormat: scalaxb.XMLFormat[silverpop.ColumnElementType] = new DefaultSilverpopColumnElementTypeFormat {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeFormat: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestType] = new DefaultSilverpopRawRecipientDataExportRequestTypeFormat {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence5Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence5] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence5Format {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence1Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence1] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence1Format {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence4Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence4] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence4Format {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence6Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence6] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence6Format {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence2Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence2] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence2Format {}
  implicit lazy val SilverpopRawRecipientDataExportRequestTypeSequence3Format: scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence3] = new DefaultSilverpopRawRecipientDataExportRequestTypeSequence3Format {}
  implicit lazy val SilverpopGetSentMailingsForOrgRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetSentMailingsForOrgRequestType] = new DefaultSilverpopGetSentMailingsForOrgRequestTypeFormat {}
  implicit lazy val SilverpopGetAggregateTrackingForMailingRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetAggregateTrackingForMailingRequestType] = new DefaultSilverpopGetAggregateTrackingForMailingRequestTypeFormat {}
  implicit lazy val SilverpopGetAggregateTrackingForOrgRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetAggregateTrackingForOrgRequestType] = new DefaultSilverpopGetAggregateTrackingForOrgRequestTypeFormat {}
  implicit lazy val SilverpopGetAggregateTrackingForUserRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetAggregateTrackingForUserRequestType] = new DefaultSilverpopGetAggregateTrackingForUserRequestTypeFormat {}
  implicit lazy val SilverpopGetJobStatusRequestTypeFormat: scalaxb.XMLFormat[silverpop.GetJobStatusRequestType] = new DefaultSilverpopGetJobStatusRequestTypeFormat {}
  implicit lazy val SilverpopDeleteJobRequestTypeFormat: scalaxb.XMLFormat[silverpop.DeleteJobRequestType] = new DefaultSilverpopDeleteJobRequestTypeFormat {}
  implicit lazy val SilverpopTopDomainElementTypeFormat: scalaxb.XMLFormat[silverpop.TopDomainElementType] = new DefaultSilverpopTopDomainElementTypeFormat {}
  implicit lazy val SilverpopInboxMonitoringElementTypeFormat: scalaxb.XMLFormat[silverpop.InboxMonitoringElementType] = new DefaultSilverpopInboxMonitoringElementTypeFormat {}
  implicit lazy val SilverpopClicksElementTypeFormat: scalaxb.XMLFormat[silverpop.ClicksElementType] = new DefaultSilverpopClicksElementTypeFormat {}
  implicit lazy val SilverpopMailingElementTypeFormat: scalaxb.XMLFormat[silverpop.MailingElementType] = new DefaultSilverpopMailingElementTypeFormat {}
  implicit lazy val SilverpopMailingElementTypeSequence6Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence6] = new DefaultSilverpopMailingElementTypeSequence6Format {}
  implicit lazy val SilverpopMailingElementTypeSequence2Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence2] = new DefaultSilverpopMailingElementTypeSequence2Format {}
  implicit lazy val SilverpopMailingElementTypeSequence3Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence3] = new DefaultSilverpopMailingElementTypeSequence3Format {}
  implicit lazy val SilverpopMailingElementTypeSequence7Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence7] = new DefaultSilverpopMailingElementTypeSequence7Format {}
  implicit lazy val SilverpopMailingElementTypeSequence5Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence5] = new DefaultSilverpopMailingElementTypeSequence5Format {}
  implicit lazy val SilverpopMailingElementTypeSequence1Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence1] = new DefaultSilverpopMailingElementTypeSequence1Format {}
  implicit lazy val SilverpopMailingElementTypeSequence4Format: scalaxb.XMLFormat[silverpop.MailingElementTypeSequence4] = new DefaultSilverpopMailingElementTypeSequence4Format {}
  implicit lazy val SilverpopTagsElementTypeFormat: scalaxb.XMLFormat[silverpop.TagsElementType] = new DefaultSilverpopTagsElementTypeFormat {}
  implicit lazy val SilverpopTrackingMetricMailingElementTypeFormat: scalaxb.XMLFormat[silverpop.TrackingMetricMailingElementType] = new DefaultSilverpopTrackingMetricMailingElementTypeFormat {}
  implicit lazy val SilverpopMultiMailingsElementTypeFormat: scalaxb.XMLFormat[silverpop.MultiMailingsElementType] = new DefaultSilverpopMultiMailingsElementTypeFormat {}
  implicit lazy val SilverpopParametersElementTypeFormat: scalaxb.XMLFormat[silverpop.ParametersElementType] = new DefaultSilverpopParametersElementTypeFormat {}
  implicit lazy val SilverpopParameterElementTypeFormat: scalaxb.XMLFormat[silverpop.ParameterElementType] = new DefaultSilverpopParameterElementTypeFormat {}
  implicit lazy val SilverpopReportingResponseTypeFormat: scalaxb.XMLFormat[silverpop.ReportingResponseType] = new DefaultSilverpopReportingResponseTypeFormat {}
  implicit lazy val SilverpopTopDomainsElementTypeFormat: scalaxb.XMLFormat[silverpop.TopDomainsElementType] = new DefaultSilverpopTopDomainsElementTypeFormat {}
  implicit lazy val SilverpopInboxMonitoredElementTypeFormat: scalaxb.XMLFormat[silverpop.InboxMonitoredElementType] = new DefaultSilverpopInboxMonitoredElementTypeFormat {}
  implicit lazy val SilverpopSessionheadertypeFormat: scalaxb.XMLFormat[silverpop.Sessionheadertype] = new DefaultSilverpopSessionheadertypeFormat {}
  implicit lazy val SilverpopFaultErrorTypeFormat: scalaxb.XMLFormat[silverpop.FaultErrorType] = new DefaultSilverpopFaultErrorTypeFormat {}
  implicit lazy val SilverpopFaultErrorTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultErrorTypeSequence1] = new DefaultSilverpopFaultErrorTypeSequence1Format {}
  implicit lazy val SilverpopFaultDetailTypeFormat: scalaxb.XMLFormat[silverpop.FaultDetailType] = new DefaultSilverpopFaultDetailTypeFormat {}
  implicit lazy val SilverpopFaultDetailTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultDetailTypeSequence1] = new DefaultSilverpopFaultDetailTypeSequence1Format {}
  implicit lazy val SilverpopFaultTypeFormat: scalaxb.XMLFormat[silverpop.FaultType] = new DefaultSilverpopFaultTypeFormat {}
  implicit lazy val SilverpopFaultTypeSequence1Format: scalaxb.XMLFormat[silverpop.FaultTypeSequence1] = new DefaultSilverpopFaultTypeSequence1Format {}
  implicit lazy val SilverpopLogoutRequestTypeFormat: scalaxb.XMLFormat[silverpop.LogoutRequestType] = new DefaultSilverpopLogoutRequestTypeFormat {}
  implicit lazy val SilverpopLoginRequestTypeFormat: scalaxb.XMLFormat[silverpop.LoginRequestType] = new DefaultSilverpopLoginRequestTypeFormat {}
  implicit lazy val SilverpopSessionMgmtResponseTypeFormat: scalaxb.XMLFormat[silverpop.SessionMgmtResponseType] = new DefaultSilverpopSessionMgmtResponseTypeFormat {}


  trait SilverPop_Engage_SoapApi_client_Bindings { this: scalaxb.Soap11ClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("SilverpopApi:Engageservice")
    lazy val service: silverpop.EngageSoapApiClientService_Interface = new SilverPop_Engage_SoapApi_client_Binding {}
    def baseAddress = new java.net.URI("http://api4.silverpop.com/SoapApi")

    trait SilverPop_Engage_SoapApi_client_Binding extends silverpop.EngageSoapApiClientService_Interface {
      import scalaxb.ElemName._
      def login(username: String, password: String): Future[silverpop.SessionMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(silverpop.LoginRequestType(username, password), Some("SilverpopApi:EngageService.SessionMgmt.Login"), "Login", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.Login"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.SessionMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def logout(logout: silverpop.LogoutRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.SessionMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(logout, Some("SilverpopApi:EngageService.SessionMgmt.Login"), "Logout", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.Logout"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.SessionMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def forwardToFriend(sendeR_EMAIL: String, rs: Option[String], r: Option[Long], m: Long, recipients: String, message: String): Future[silverpop.ForwardToFriendResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(silverpop.ForwardToFriendRequestType(sendeR_EMAIL, rs, r, m, recipients, message), Some("SilverpopApi:EngageService.MailManagement"), "ForwardToFriend", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ForwardToFriend"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ForwardToFriendResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def sendMailing(mailingId: Long, recipientEmail: String): Future[silverpop.SendMailingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(silverpop.SendMailingRequestType(mailingId, recipientEmail), Some("SilverpopApi:EngageService.MailManagement"), "SendMailing", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.SendMailing"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.SendMailingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def addRecipient(addRecipient: silverpop.AddRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(addRecipient, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "AddRecipient", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.AddRecipient"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def doubleOptIn(doubleOptInRecipient: silverpop.DoubleOptInRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(doubleOptInRecipient, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "DoubleOptInRecipient", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.DoubleOptIn"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def updateRecipient(updateRecipient: silverpop.UpdateRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(updateRecipient, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "UpdateRecipient", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.UpdateRecipient"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def optOutRecipient(optOutRecipient: silverpop.OptOutRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(optOutRecipient, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "OptOutRecipient", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.OptOutRecipient"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def selectRecipientData(selectRecipientData: silverpop.SelectRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(selectRecipientData, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SelectRecipientData", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.SelectRecipientData"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def trackingMetricExport(trackingMetricExport: silverpop.TrackingMetricExportRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(trackingMetricExport, Some("SilverpopApi:EngageService.Reporting"), "TrackingMetricExport", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.TrackingMetricExport"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getReportIdByDate(getReportIdByDate: silverpop.GetReportIdByDateRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getReportIdByDate, Some("SilverpopApi:EngageService.Reporting"), "GetReportIdByDate", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetReportIdByDate"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getSentMailingsForUser(getSentMailingsForUser: silverpop.GetSentMailingsForUserRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getSentMailingsForUser, Some("SilverpopApi:EngageService.Reporting"), "GetSentMailingsForUser", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetSentMailingsForUser"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getSentMailingsForList(getSentMailingsForList: silverpop.GetSentMailingsForListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getSentMailingsForList, Some("SilverpopApi:EngageService.Reporting"), "GetSentMailingsForList", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetSentMailingsForList"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def rawRecipientDataExport(rawRecipientDataExport: silverpop.RawRecipientDataExportRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(rawRecipientDataExport, Some("SilverpopApi:EngageService.Reporting"), "RawRecipientDataExport", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.RawRecipientDataExport"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getSentMailingsForOrg(getSentMailingsForOrg: silverpop.GetSentMailingsForOrgRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getSentMailingsForOrg, Some("SilverpopApi:EngageService.Reporting"), "GetSentMailingsForOrg", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetSentMailingsForOrg"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getAggregateTrackingForMailing(getAggregateTrackingForMailing: silverpop.GetAggregateTrackingForMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getAggregateTrackingForMailing, Some("SilverpopApi:EngageService.Reporting"), "GetAggregateTrackingForMailing", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetAggregateTrackingForMailing"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getAggregateTrackingForOrg(getAggregateTrackingForOrg: silverpop.GetAggregateTrackingForOrgRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getAggregateTrackingForOrg, Some("SilverpopApi:EngageService.Reporting"), "GetAggregateTrackingForOrg", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetAggregateTrackingForOrg"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getAggregateTrackingForUser(getAggregateTrackingForUser: silverpop.GetAggregateTrackingForUserRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getAggregateTrackingForUser, Some("SilverpopApi:EngageService.Reporting"), "GetAggregateTrackingForUser", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetAggregateTrackingForUser"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getJobStatus(getJobStatus: silverpop.GetJobStatusRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getJobStatus, Some("SilverpopApi:EngageService.Reporting"), "GetJobStatus", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetJobStatus"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteJob(deleteJob: silverpop.DeleteJobRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ReportingResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(deleteJob, Some("SilverpopApi:EngageService.Reporting"), "DeleteJob", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.DeleteJob"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ReportingResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def calculateQuery(calculateQuery: silverpop.CalculateQueryRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(calculateQuery, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CalculateQuery", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.CalculateQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def importList(importList: silverpop.ImportListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(importList, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ImportList", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ImportList"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def importRecipientFieldData(importRecipientFieldData: silverpop.ImportRecipientFieldDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(importRecipientFieldData, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ImportRecipientFieldData", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ImportRecipientFieldData"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def exportList(exportList: silverpop.ExportListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(exportList, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ExportList", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ExportList"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getListMetaData(getListMetaData: silverpop.GetListMetaDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getListMetaData, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "GetListMetaData", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetListMetaData"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def listRecipientMailings(listRecipientMailings: silverpop.ListRecipientMailingsRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(listRecipientMailings, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ListRecipientMailings", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ListRecipientMailings"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def removeRecipient(removeRecipient: silverpop.RemoveRecipientRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(removeRecipient, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "RemoveRecipient", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.RemoveRecipient"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getLists(getLists: silverpop.GetListsRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getLists, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "GetLists", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetLists"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def importTable(importTable: silverpop.ImportTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(importTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ImportTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ImportTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def joinTable(joinTable: silverpop.JoinTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(joinTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "JoinTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.JoinTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def exportTable(exportTable: silverpop.ExportTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(exportTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ExportTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ExportTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteTable(deleteTable: silverpop.DeleteTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(deleteTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DeleteTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.DeleteTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def createQuery(createQuery: silverpop.CreateQueryRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(createQuery, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CreateQuery", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.CreateQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def scheduleMailing(scheduleMailing: silverpop.ScheduleMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(scheduleMailing, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ScheduleMailing", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ScheduleMailing"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def addDCRuleset(addDCRuleset: silverpop.AddDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(addDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "AddDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.AddDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def importDCRuleset(importDCRuleset: silverpop.ImportDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(importDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ImportDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ImportDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def exportDCRuleset(exportDCRuleset: silverpop.ExportDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(exportDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ExportDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ExportDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def listDCRulesetsForMailing(listDCRulesetsForMailing: silverpop.ListDCRulesetsForMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(listDCRulesetsForMailing, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ListDCRulesetsForMailing", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ListDCRulesetsForMailing"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getDCRuleset(getDCRuleset: silverpop.GetDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "GetDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def replaceDCRuleset(replaceDCRuleset: silverpop.ReplaceDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(replaceDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ReplaceDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ReplaceDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def validateDCMailingRuleset(validateDCRuleset: silverpop.ValidateDCMailingRulesetType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(validateDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ValidateDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ValidateDCMailingRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteDCRuleset(deleteDCRuleset: silverpop.DeleteDCRulesetRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(deleteDCRuleset, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "DeleteDCRuleset", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.DeleteDCRuleset"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def exportMailingTemplate(exportMailingTemplate: silverpop.ExportMailingTemplateRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(exportMailingTemplate, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ExportMailingTemplate", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.ExportMailingTemplate"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getMailingTemplates(getMailingTemplates: silverpop.GetMailingTemplatesRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(getMailingTemplates, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "GetMailingTemplates", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.GetMailingTemplates"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def purgeTable(purgeTable: silverpop.PurgeTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(purgeTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PurgeTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.PurgeTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def previewMailing(previewMailing: silverpop.PreviewMailingRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.MailMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(previewMailing, Some("SilverpopApi:EngageService.MailManagement.UserActions"), "PreviewMailing", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.PreviewMailing"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.MailMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def addListColumn(addListColumn: silverpop.AddListColumnRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(addListColumn, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "AddListColumn", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.AddListColumn"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def createTable(createTable: silverpop.CreateTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(createTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CreateTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.CreateTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def insertUpdateRelationalTable(insertUpdateRelationalTable: silverpop.InsertUpdateRelationalTableRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(insertUpdateRelationalTable, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "InsertUpdateRelationalTable", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.InsertUpdateRelationalTable"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteRelationalTableData(deleteRelationalTableData: silverpop.DeleteRelationalTableDataRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(deleteRelationalTableData, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DeleteRelationalTableData", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.DeleteRelationalTableData"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def createContactList(createContactList: silverpop.CreateContactListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(createContactList, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CreateContactList", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.CreateContactList"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def addContactToContactList(addContactToContactList: silverpop.AddContactToContactListRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(addContactToContactList, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "AddContactToContactList", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.AddContactToContactList"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def addContactToProgram(addContactToProgram: silverpop.AddContactToProgramRequestType, sessionHeader: silverpop.Sessionheadertype): Future[silverpop.ListMgmtUserActionsResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(addContactToProgram, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "AddContactToProgram", defaultScope),
            scalaxb.toXML(sessionHeader, Some("SilverpopApi:EngageService.SessionHeader"), "sessionHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("SilverpopApi:Engageservice.AddContactToProgram"))).transform({ case (header, body) => 
            scalaxb.fromXML[silverpop.ListMgmtUserActionsResponseType]((body.headOption getOrElse {body}), Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
    }
  }


  def buildSilverpopFileEncodingTypeFormat = new DefaultSilverpopFileEncodingTypeFormat {}
  trait DefaultSilverpopFileEncodingTypeFormat extends scalaxb.XMLFormat[silverpop.FileEncodingType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FileEncodingType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.FileEncodingType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.FileEncodingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.FileEncodingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopListTypeIdFormat = new DefaultSilverpopListTypeIdFormat {}
  trait DefaultSilverpopListTypeIdFormat extends scalaxb.XMLFormat[silverpop.ListTypeId] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListTypeId] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ListTypeId.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ListTypeId.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ListTypeId, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopListColumnTypeFormat = new DefaultSilverpopListColumnTypeFormat {}
  trait DefaultSilverpopListColumnTypeFormat extends scalaxb.XMLFormat[silverpop.ListColumnType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListColumnType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ListColumnType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ListColumnType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ListColumnType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopTableColumnTypeFormat = new DefaultSilverpopTableColumnTypeFormat {}
  trait DefaultSilverpopTableColumnTypeFormat extends scalaxb.XMLFormat[silverpop.TableColumnType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.TableColumnType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.TableColumnType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.TableColumnType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.TableColumnType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopVisibilityTypeFormat = new DefaultSilverpopVisibilityTypeFormat {}
  trait DefaultSilverpopVisibilityTypeFormat extends scalaxb.XMLFormat[silverpop.VisibilityType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.VisibilityType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.VisibilityType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.VisibilityType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.VisibilityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopExportTypeFormat = new DefaultSilverpopExportTypeFormat {}
  trait DefaultSilverpopExportTypeFormat extends scalaxb.XMLFormat[silverpop.ExportType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ExportType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ExportType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ExportType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ExportType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopListTableExportFormatFormat = new DefaultSilverpopListTableExportFormatFormat {}
  trait DefaultSilverpopListTableExportFormatFormat extends scalaxb.XMLFormat[silverpop.ListTableExportFormat] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListTableExportFormat] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ListTableExportFormat.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ListTableExportFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ListTableExportFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopOptionOperatorFormat = new DefaultSilverpopOptionOperatorFormat {}
  trait DefaultSilverpopOptionOperatorFormat extends scalaxb.XMLFormat[silverpop.OptionOperator] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.OptionOperator] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.OptionOperator.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.OptionOperator.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.OptionOperator, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopTypeOperatorFormat = new DefaultSilverpopTypeOperatorFormat {}
  trait DefaultSilverpopTypeOperatorFormat extends scalaxb.XMLFormat[silverpop.TypeOperator] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.TypeOperator] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.TypeOperator.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.TypeOperator.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.TypeOperator, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopWhereOperatorFormat = new DefaultSilverpopWhereOperatorFormat {}
  trait DefaultSilverpopWhereOperatorFormat extends scalaxb.XMLFormat[silverpop.WhereOperator] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.WhereOperator] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.WhereOperator.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.WhereOperator.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.WhereOperator, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopCriteriaOperatorFormat = new DefaultSilverpopCriteriaOperatorFormat {}
  trait DefaultSilverpopCriteriaOperatorFormat extends scalaxb.XMLFormat[silverpop.CriteriaOperator] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.CriteriaOperator] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.CriteriaOperator.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.CriteriaOperator.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.CriteriaOperator, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopCriteriaTypeFormat = new DefaultSilverpopCriteriaTypeFormat {}
  trait DefaultSilverpopCriteriaTypeFormat extends scalaxb.XMLFormat[silverpop.CriteriaType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.CriteriaType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.CriteriaType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.CriteriaType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.CriteriaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopExpressionTypeTypeFormat = new DefaultSilverpopExpressionTypeTypeFormat {}
  trait DefaultSilverpopExpressionTypeTypeFormat extends scalaxb.XMLFormat[silverpop.ExpressionTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ExpressionTypeType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ExpressionTypeType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ExpressionTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ExpressionTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopOperatorsTypeFormat = new DefaultSilverpopOperatorsTypeFormat {}
  trait DefaultSilverpopOperatorsTypeFormat extends scalaxb.XMLFormat[silverpop.OperatorsType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.OperatorsType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.OperatorsType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.OperatorsType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.OperatorsType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopAndOrTypeFormat = new DefaultSilverpopAndOrTypeFormat {}
  trait DefaultSilverpopAndOrTypeFormat extends scalaxb.XMLFormat[silverpop.AndOrType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.AndOrType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.AndOrType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.AndOrType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.AndOrType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSilverpopFaultErrorTypeType3Format extends scalaxb.ElemNameParser[silverpop.FaultErrorTypeType3] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorTypeType3] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeType3Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorTypeType3(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorTypeType3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypetype3sequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeType3Sequence1](_, None, Some("faulterrortypetype3sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeType3Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeType3Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeType3Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeType3Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeType3Format extends scalaxb.ElemNameParser[silverpop.FaultDetailTypeType3] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailTypeType3] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeType3Sequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorTypeType3](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailTypeType3(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailTypeType3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypetype3sequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeType3Sequence1](_, None, Some("faultdetailtypetype3sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeType3Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeType3Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeType3Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeType3Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorTypeType3](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeType3Format extends scalaxb.ElemNameParser[silverpop.FaultTypeType3] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultTypeType3] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeType3Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailTypeType3](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultTypeType3(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultTypeType3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypetype3sequence1 map { scalaxb.toXML[silverpop.FaultTypeType3Sequence1](_, None, Some("faulttypetype3sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeType3Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeType3Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeType3Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeType3Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailTypeType3](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopImportListRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ImportListRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ImportListRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ImportListRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MAP_FILE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SOURCE_FILE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FILE_ENCODING")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.ImportListRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[silverpop.FileEncodingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ImportListRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MAP_FILE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MAP_FILE"), __scope, false),
        scalaxb.toXML[String](__obj.SOURCE_FILE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SOURCE_FILE"), __scope, false),
        __obj.FILE_ENCODING map { scalaxb.toXML[silverpop.FileEncodingType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FILE_ENCODING"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopListMgmtUserActionsResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.ListMgmtUserActionsResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ListMgmtUserActionsResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ListMgmtUserActionsResponseType] =
      phrase(((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "Fault")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "JOB_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FILE_PATH")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SIZE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NUM_OPT_OUTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NUM_UNDELIVERABLE"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.ListMgmtUserActionsResponseTypeSequence1(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[silverpop.FaultTypeType3](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[silverpop.ListTypeId](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LAST_MODIFIED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LAST_CONFIGURED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CREATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "USER_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ORGANIZATION_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "OPT_IN_FORM_DEFINED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "OPT_OUT_FORM_DEFINED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PROFILE_FORM_DEFINED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "OPT_IN_AUTOREPLY_DEFINED"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.ListMgmtUserActionsResponseTypeSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PROFILE_AUTOREPLY_DEFINED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SMS_KEYWORD")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMNS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SELECTION_VALUES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "KEY_COLUMNS")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "Mailing")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FAILURES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CONTACT_LIST_ID"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.ListMgmtUserActionsResponseTypeSequence3(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.ColumnsElementTypeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.SelectionValuesElementType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[silverpop.ColumnsElementTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[silverpop.MailingElementTypeType](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[silverpop.ListElementType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[silverpop.FailuresElementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.ListMgmtUserActionsResponseType(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: silverpop.ListMgmtUserActionsResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.ListMgmtUserActionsResponseTypeSequence1](__obj.listmgmtuseractionsresponsetypesequence1, None, Some("listmgmtuseractionsresponsetypesequence1"), __scope, false),
        scalaxb.toXML[silverpop.ListMgmtUserActionsResponseTypeSequence2](__obj.listmgmtuseractionsresponsetypesequence2, None, Some("listmgmtuseractionsresponsetypesequence2"), __scope, false),
        scalaxb.toXML[silverpop.ListMgmtUserActionsResponseTypeSequence3](__obj.listmgmtuseractionsresponsetypesequence3, None, Some("listmgmtuseractionsresponsetypesequence3"), __scope, false))

  }

  trait DefaultSilverpopListMgmtUserActionsResponseTypeSequence3Format extends scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListMgmtUserActionsResponseTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: silverpop.ListMgmtUserActionsResponseTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.PROFILE_AUTOREPLY_DEFINED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PROFILE_AUTOREPLY_DEFINED"), __scope, false) } getOrElse {Nil},
        __obj.SMS_KEYWORD map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SMS_KEYWORD"), __scope, false) } getOrElse {Nil},
        __obj.COLUMNS map { scalaxb.toXML[silverpop.ColumnsElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMNS"), __scope, false) } getOrElse {Nil},
        __obj.SELECTION_VALUES map { scalaxb.toXML[silverpop.SelectionValuesElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SELECTION_VALUES"), __scope, false) } getOrElse {Nil},
        __obj.KEY_COLUMNS map { scalaxb.toXML[silverpop.ColumnsElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("KEY_COLUMNS"), __scope, false) } getOrElse {Nil},
        __obj.Mailing flatMap { scalaxb.toXML[silverpop.MailingElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("Mailing"), __scope, false) },
        __obj.LIST flatMap { scalaxb.toXML[silverpop.ListElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST"), __scope, false) },
        __obj.TABLE_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false) } getOrElse {Nil},
        __obj.FAILURES map { scalaxb.toXML[silverpop.FailuresElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FAILURES"), __scope, false) } getOrElse {Nil},
        __obj.CONTACT_LIST_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CONTACT_LIST_ID"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopListMgmtUserActionsResponseTypeSequence2Format extends scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListMgmtUserActionsResponseTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: silverpop.ListMgmtUserActionsResponseTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.LAST_MODIFIED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LAST_MODIFIED"), __scope, false) } getOrElse {Nil},
        __obj.LAST_CONFIGURED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LAST_CONFIGURED"), __scope, false) } getOrElse {Nil},
        __obj.CREATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CREATED"), __scope, false) } getOrElse {Nil},
        __obj.VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.USER_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("USER_ID"), __scope, false) } getOrElse {Nil},
        __obj.ORGANIZATION_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ORGANIZATION_ID"), __scope, false) } getOrElse {Nil},
        __obj.OPT_IN_FORM_DEFINED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("OPT_IN_FORM_DEFINED"), __scope, false) } getOrElse {Nil},
        __obj.OPT_OUT_FORM_DEFINED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("OPT_OUT_FORM_DEFINED"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_FORM_DEFINED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PROFILE_FORM_DEFINED"), __scope, false) } getOrElse {Nil},
        __obj.OPT_IN_AUTOREPLY_DEFINED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("OPT_IN_AUTOREPLY_DEFINED"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopListMgmtUserActionsResponseTypeSequence1Format extends scalaxb.XMLFormat[silverpop.ListMgmtUserActionsResponseTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ListMgmtUserActionsResponseTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.ListMgmtUserActionsResponseTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.SUCCESS map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SUCCESS"), __scope, false) } getOrElse {Nil},
        __obj.Fault map { scalaxb.toXML[silverpop.FaultTypeType3](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("Fault"), __scope, false) } getOrElse {Nil},
        __obj.JOB_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("JOB_ID"), __scope, false) } getOrElse {Nil},
        __obj.FILE_PATH map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FILE_PATH"), __scope, false) } getOrElse {Nil},
        __obj.ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ID"), __scope, false) } getOrElse {Nil},
        __obj.NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NAME"), __scope, false) } getOrElse {Nil},
        __obj.TYPE map { scalaxb.toXML[silverpop.ListTypeId](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false) } getOrElse {Nil},
        __obj.SIZE map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SIZE"), __scope, false) } getOrElse {Nil},
        __obj.NUM_OPT_OUTS map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NUM_OPT_OUTS"), __scope, false) } getOrElse {Nil},
        __obj.NUM_UNDELIVERABLE map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NUM_UNDELIVERABLE"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopListElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ListElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ListElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ListElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SIZE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NUM_OPT_OUTS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NUM_UNDELIVERABLE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LAST_MODIFIED")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PARENT_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "USER_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PARENT_FOLDER_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "IS_FOLDER")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FLAGGED_FOR_BACKUP")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SUPPRESSION_LIST_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      silverpop.ListElementType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.ListTypeId](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.VisibilityType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p13, scalaxb.ElemName(node) :: stack),
        p14.toSeq map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ListElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ID"), __scope, false),
        scalaxb.toXML[String](__obj.NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NAME"), __scope, false),
        scalaxb.toXML[silverpop.ListTypeId](__obj.TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false),
        scalaxb.toXML[Int](__obj.SIZE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SIZE"), __scope, false),
        scalaxb.toXML[Int](__obj.NUM_OPT_OUTS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NUM_OPT_OUTS"), __scope, false),
        scalaxb.toXML[Int](__obj.NUM_UNDELIVERABLE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NUM_UNDELIVERABLE"), __scope, false),
        scalaxb.toXML[String](__obj.LAST_MODIFIED, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LAST_MODIFIED"), __scope, false),
        scalaxb.toXML[silverpop.VisibilityType](__obj.VISIBILITY, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VISIBILITY"), __scope, false),
        __obj.PARENT_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PARENT_NAME"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.USER_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("USER_ID"), __scope, false),
        __obj.PARENT_FOLDER_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PARENT_FOLDER_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.IS_FOLDER, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("IS_FOLDER"), __scope, false),
        scalaxb.toXML[Boolean](__obj.FLAGGED_FOR_BACKUP, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FLAGGED_FOR_BACKUP"), __scope, false),
        __obj.SUPPRESSION_LIST_ID flatMap { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SUPPRESSION_LIST_ID"), __scope, false) })

  }

  trait DefaultSilverpopMailingElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.MailingElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("MailingElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MailingElementTypeType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MailingName")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MailingId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SentTS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalOpens")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalClickstreams")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalClicks")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalConversions")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalAttachments")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalForwards")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalMediaPlays")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalBounces")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TotalOptOuts")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      silverpop.MailingElementTypeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p12, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.MailingElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MailingName, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MailingName"), __scope, false),
        scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MailingId"), __scope, false),
        scalaxb.toXML[String](__obj.SentTS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SentTS"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalOpens, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalOpens"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalClickstreams, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalClickstreams"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalClicks, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalClicks"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalConversions, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalConversions"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalAttachments, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalAttachments"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalForwards, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalForwards"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalMediaPlays, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalMediaPlays"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalBounces, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalBounces"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalOptOuts, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TotalOptOuts"), __scope, false))

  }

  trait DefaultSilverpopRemoveRecipientRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.RemoveRecipientRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("RemoveRecipientRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RemoveRecipientRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.RemoveRecipientRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[silverpop.ColumnNameValueElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.RemoveRecipientRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false),
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnNameValueElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) })

  }

  trait DefaultSilverpopColumnNameValueElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ColumnNameValueElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ColumnNameValueElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnNameValueElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VALUE")) ^^
      { case p1 ~ p2 =>
      silverpop.ColumnNameValueElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ColumnNameValueElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NAME"), __scope, false),
        scalaxb.toXML[String](__obj.VALUE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VALUE"), __scope, false))

  }

  trait DefaultSilverpopImportRecipientFieldDataRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ImportRecipientFieldDataRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ImportRecipientFieldDataRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ImportRecipientFieldDataRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SOURCE_FILE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COMPLETION_EMAIL")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ERROR_EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FILE_ENCODING")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      silverpop.ImportRecipientFieldDataRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[silverpop.FileEncodingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ImportRecipientFieldDataRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[String](__obj.COLUMN, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false),
        scalaxb.toXML[String](__obj.SOURCE_FILE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SOURCE_FILE"), __scope, false),
        scalaxb.toXML[String](__obj.COMPLETION_EMAIL, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COMPLETION_EMAIL"), __scope, false),
        scalaxb.toXML[String](__obj.ERROR_EMAIL, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ERROR_EMAIL"), __scope, false),
        __obj.FILE_ENCODING map { scalaxb.toXML[silverpop.FileEncodingType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FILE_ENCODING"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopExportListRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ExportListRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ExportListRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExportListRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EXPORT_TYPE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EXPORT_FORMAT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FILE_ENCODING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ADD_TO_STORED_FILES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DATE_START")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DATE_END")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.ExportListRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.ExportType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.ListTableExportFormat](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[silverpop.FileEncodingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExportListRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false),
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.ExportType](__obj.EXPORT_TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EXPORT_TYPE"), __scope, false),
        scalaxb.toXML[silverpop.ListTableExportFormat](__obj.EXPORT_FORMAT, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EXPORT_FORMAT"), __scope, false),
        __obj.FILE_ENCODING map { scalaxb.toXML[silverpop.FileEncodingType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FILE_ENCODING"), __scope, false) } getOrElse {Nil},
        __obj.ADD_TO_STORED_FILES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ADD_TO_STORED_FILES"), __scope, false) } getOrElse {Nil},
        __obj.DATE_START map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DATE_START"), __scope, false) } getOrElse {Nil},
        __obj.DATE_END map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DATE_END"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetListMetaDataRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetListMetaDataRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("GetListMetaDataRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetListMetaDataRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ^^
      { case p1 =>
      silverpop.GetListMetaDataRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.GetListMetaDataRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false))
  }

  trait DefaultSilverpopColumnsElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.ColumnsElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ColumnsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnsElementTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ^^
      { case p1 =>
      silverpop.ColumnsElementTypeType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ColumnsElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopColumnElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.ColumnElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ColumnElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnElementTypeType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DEFAULT_VALUE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SELECTION_VALUES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.ColumnElementTypeType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.ListColumnType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.SelectionValuesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ColumnElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NAME"), __scope, false) } getOrElse {Nil},
        __obj.DEFAULT_VALUE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DEFAULT_VALUE"), __scope, false) } getOrElse {Nil},
        __obj.TYPE map { scalaxb.toXML[silverpop.ListColumnType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false) } getOrElse {Nil},
        __obj.SELECTION_VALUES map { scalaxb.toXML[silverpop.SelectionValuesElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SELECTION_VALUES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopTableColumnsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TableColumnsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("TableColumnsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TableColumnsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ^^
      { case p1 =>
      silverpop.TableColumnsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.TableColumnElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.TableColumnsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.TableColumnElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopTableColumnElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TableColumnElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("TableColumnElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TableColumnElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "IS_REQUIRED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "KEY_COLUMN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DEFAULT_VALUE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SELECTION_VALUES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      silverpop.TableColumnElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.TableColumnType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[silverpop.SelectionValuesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.TableColumnElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("NAME"), __scope, false),
        scalaxb.toXML[silverpop.TableColumnType](__obj.TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false),
        __obj.IS_REQUIRED map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("IS_REQUIRED"), __scope, false) } getOrElse {Nil},
        __obj.KEY_COLUMN map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("KEY_COLUMN"), __scope, false) } getOrElse {Nil},
        __obj.DEFAULT_VALUE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DEFAULT_VALUE"), __scope, false) } getOrElse {Nil},
        __obj.SELECTION_VALUES map { scalaxb.toXML[silverpop.SelectionValuesElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SELECTION_VALUES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopRowsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.RowsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("RowsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RowsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ROW")) ^^
      { case p1 =>
      silverpop.RowsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.RowElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.RowsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ROW flatMap { scalaxb.toXML[silverpop.RowElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ROW"), __scope, false) })
  }

  trait DefaultSilverpopRowElementTypeFormat extends scalaxb.ElemNameParser[silverpop.RowElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("RowElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RowElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ^^
      { case p1 =>
      silverpop.RowElementType(p1.toSeq map { scalaxb.fromXML[silverpop.RowColumnElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.RowElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.RowColumnElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopRowColumnElementTypeFormat extends scalaxb.XMLFormat[silverpop.RowColumnElementType] with scalaxb.CanWriteChildNodes[silverpop.RowColumnElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RowColumnElementType] = seq match {
      case node: scala.xml.Node => Right(silverpop.RowColumnElementType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: silverpop.RowColumnElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }
    def writesChildNodes(__obj: silverpop.RowColumnElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSilverpopDeleteRowsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteRowsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("DeleteRowsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteRowsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ROW")) ^^
      { case p1 =>
      silverpop.DeleteRowsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.DeleteRowElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.DeleteRowsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ROW flatMap { scalaxb.toXML[silverpop.DeleteRowElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ROW"), __scope, false) })
  }

  trait DefaultSilverpopDeleteRowElementTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteRowElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("DeleteRowElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteRowElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "KEY_COLUMN")) ^^
      { case p1 =>
      silverpop.DeleteRowElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnNameElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.DeleteRowElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.KEY_COLUMN flatMap { scalaxb.toXML[silverpop.ColumnNameElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("KEY_COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopColumnNameElementTypeFormat extends scalaxb.XMLFormat[silverpop.ColumnNameElementType] with scalaxb.CanWriteChildNodes[silverpop.ColumnNameElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ColumnNameElementType] = seq match {
      case node: scala.xml.Node => Right(silverpop.ColumnNameElementType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: silverpop.ColumnNameElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }
    def writesChildNodes(__obj: silverpop.ColumnNameElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSilverpopSelectionValuesElementTypeFormat extends scalaxb.ElemNameParser[silverpop.SelectionValuesElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("SelectionValuesElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SelectionValuesElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VALUE")) ^^
      { case p1 =>
      silverpop.SelectionValuesElementType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.SelectionValuesElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.VALUE flatMap { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VALUE"), __scope, false) })
  }

  trait DefaultSilverpopFailuresElementTypeFormat extends scalaxb.ElemNameParser[silverpop.FailuresElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("FailuresElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FailuresElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FAILURE")) ^^
      { case p1 =>
      silverpop.FailuresElementType(p1.toSeq map { scalaxb.fromXML[silverpop.FailureElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.FailuresElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.FAILURE flatMap { scalaxb.toXML[silverpop.FailureElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FAILURE"), __scope, false) })
  }

  trait DefaultSilverpopFailureElementTypeFormat extends scalaxb.ElemNameParser[silverpop.FailureElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("FailureElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FailureElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "KEY_COLUMN")) ^^
      { case p1 ~ p2 =>
      silverpop.FailureElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnNameElementType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[silverpop.ColumnNameElementType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@failure_type"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@description"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: silverpop.FailureElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "failure_type", __obj.failure_type.toString, attr)
      attr = scala.xml.Attribute(null, "description", __obj.description.toString, attr)
      attr
    }

    def writesChildNodes(__obj: silverpop.FailureElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnNameElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) },
        __obj.KEY_COLUMN flatMap { scalaxb.toXML[silverpop.ColumnNameElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("KEY_COLUMN"), __scope, false) })

  }

  trait DefaultSilverpopGetListsRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetListsRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("GetListsRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetListsRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VISIBILITY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_TYPE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "FOLDER_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "INCLUDE_ALL_LISTS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.GetListsRequestType(scalaxb.fromXML[silverpop.VisibilityType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.ListTypeId](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetListsRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.VisibilityType](__obj.VISIBILITY, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VISIBILITY"), __scope, false),
        scalaxb.toXML[silverpop.ListTypeId](__obj.LIST_TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_TYPE"), __scope, false),
        __obj.FOLDER_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("FOLDER_ID"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_ALL_LISTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("INCLUDE_ALL_LISTS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopListRecipientMailingsRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ListRecipientMailingsRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ListRecipientMailingsRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ListRecipientMailingsRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "RECIPIENT_ID")) ^^
      { case p1 ~ p2 =>
      silverpop.ListRecipientMailingsRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ListRecipientMailingsRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[Long](__obj.RECIPIENT_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("RECIPIENT_ID"), __scope, false))

  }

  trait DefaultSilverpopImportTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ImportTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ImportTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ImportTableRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MAP_FILE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SOURCE_FILE")) ^^
      { case p1 ~ p2 =>
      silverpop.ImportTableRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ImportTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MAP_FILE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MAP_FILE"), __scope, false),
        scalaxb.toXML[String](__obj.SOURCE_FILE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SOURCE_FILE"), __scope, false))

  }

  trait DefaultSilverpopJoinTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.JoinTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("JoinTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.JoinTableRequestType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "REMOVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MAP_FIELD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      silverpop.JoinTableRequestType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[silverpop.MapFieldElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.JoinTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TABLE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.LIST_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_NAME"), __scope, false) } getOrElse {Nil},
        __obj.LIST_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false) } getOrElse {Nil},
        __obj.LIST_VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.REMOVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("REMOVE"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.MAP_FIELD flatMap { scalaxb.toXML[silverpop.MapFieldElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MAP_FIELD"), __scope, false) })

  }

  trait DefaultSilverpopMapFieldElementTypeFormat extends scalaxb.ElemNameParser[silverpop.MapFieldElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("MapFieldElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MapFieldElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_FIELD")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_FIELD")) ^^
      { case p1 ~ p2 =>
      silverpop.MapFieldElementType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.MapFieldElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LIST_FIELD map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_FIELD"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_FIELD map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_FIELD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopExportTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ExportTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ExportTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExportTableRequestType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EXPORT_FORMAT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ADD_TO_STORED_FILES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DATE_START")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DATE_END")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.ExportTableRequestType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.ListTableExportFormat](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExportTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TABLE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.ListTableExportFormat](__obj.EXPORT_FORMAT, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EXPORT_FORMAT"), __scope, false),
        __obj.ADD_TO_STORED_FILES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ADD_TO_STORED_FILES"), __scope, false) } getOrElse {Nil},
        __obj.DATE_START map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DATE_START"), __scope, false) } getOrElse {Nil},
        __obj.DATE_END map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DATE_END"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopDeleteTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("DeleteTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteTableRequestType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.DeleteTableRequestType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.DeleteTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TABLE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopCreateQueryRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.CreateQueryRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("CreateQueryRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CreateQueryRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "QUERY_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PARENT_LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PARENT_FOLDER_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ALLOW_FIELD_CHANGE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SELECT_COLUMNS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CRITERIA")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "BEHAVIOR")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.CreateQueryRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.VisibilityType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[silverpop.CriteriaElementTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[silverpop.BehaviorElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.CreateQueryRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.QUERY_NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("QUERY_NAME"), __scope, false),
        scalaxb.toXML[Long](__obj.PARENT_LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PARENT_LIST_ID"), __scope, false),
        scalaxb.toXML[silverpop.VisibilityType](__obj.VISIBILITY, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VISIBILITY"), __scope, false),
        __obj.PARENT_FOLDER_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PARENT_FOLDER_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.ALLOW_FIELD_CHANGE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ALLOW_FIELD_CHANGE"), __scope, false),
        __obj.SELECT_COLUMNS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SELECT_COLUMNS"), __scope, false) } getOrElse {Nil},
        __obj.CRITERIA map { scalaxb.toXML[silverpop.CriteriaElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CRITERIA"), __scope, false) } getOrElse {Nil},
        __obj.BEHAVIOR map { scalaxb.toXML[silverpop.BehaviorElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("BEHAVIOR"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopCalculateQueryRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.CalculateQueryRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("CalculateQueryRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CalculateQueryRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "QUERY_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ^^
      { case p1 ~ p2 =>
      silverpop.CalculateQueryRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.CalculateQueryRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.QUERY_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("QUERY_ID"), __scope, false),
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopBehaviorElementTypeFormat extends scalaxb.ElemNameParser[silverpop.BehaviorElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("BehaviorElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.BehaviorElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "OPTION_OPERATOR")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE_OPERATOR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "REPORT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LINK_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "WHERE_OPERATOR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CRITERIA_OPERATOR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VALUES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.BehaviorElementType(scalaxb.fromXML[silverpop.OptionOperator](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.TypeOperator](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[silverpop.WhereOperator](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[silverpop.CriteriaOperator](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.BehaviorElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.OptionOperator](__obj.OPTION_OPERATOR, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("OPTION_OPERATOR"), __scope, false),
        scalaxb.toXML[silverpop.TypeOperator](__obj.TYPE_OPERATOR, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE_OPERATOR"), __scope, false),
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.REPORT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("REPORT_ID"), __scope, false) } getOrElse {Nil},
        __obj.LINK_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LINK_NAME"), __scope, false) } getOrElse {Nil},
        __obj.WHERE_OPERATOR map { scalaxb.toXML[silverpop.WhereOperator](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("WHERE_OPERATOR"), __scope, false) } getOrElse {Nil},
        __obj.CRITERIA_OPERATOR map { scalaxb.toXML[silverpop.CriteriaOperator](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CRITERIA_OPERATOR"), __scope, false) } getOrElse {Nil},
        __obj.VALUES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VALUES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopCriteriaElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.CriteriaElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("CriteriaElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CriteriaElementTypeType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EXPRESSION")) ^^
      { case p1 ~ p2 =>
      silverpop.CriteriaElementTypeType(scalaxb.fromXML[silverpop.CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[silverpop.ExpressionElementTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.CriteriaElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.CriteriaType](__obj.TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false),
        __obj.EXPRESSION flatMap { scalaxb.toXML[silverpop.ExpressionElementTypeType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EXPRESSION"), __scope, false) })

  }

  trait DefaultSilverpopExpressionElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.ExpressionElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("ExpressionElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExpressionElementTypeType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "AND_OR")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TYPE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "OPERATORS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "RIGHT_PARENS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VALUES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LEFT_PARENS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      silverpop.ExpressionElementTypeType(p1.headOption map { scalaxb.fromXML[silverpop.AndOrType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.ExpressionTypeType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.OperatorsType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExpressionElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AND_OR map { scalaxb.toXML[silverpop.AndOrType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("AND_OR"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.ExpressionTypeType](__obj.TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TYPE"), __scope, false),
        scalaxb.toXML[String](__obj.COLUMN_NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN_NAME"), __scope, false),
        scalaxb.toXML[silverpop.OperatorsType](__obj.OPERATORS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("OPERATORS"), __scope, false),
        __obj.RIGHT_PARENS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("RIGHT_PARENS"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.VALUES, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VALUES"), __scope, false),
        __obj.LEFT_PARENS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LEFT_PARENS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopPurgeTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.PurgeTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("PurgeTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.PurgeTableRequestType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DELETE_BEFORE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "EMAIL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.PurgeTableRequestType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.VisibilityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.PurgeTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TABLE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false) } getOrElse {Nil},
        __obj.TABLE_VISIBILITY map { scalaxb.toXML[silverpop.VisibilityType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_VISIBILITY"), __scope, false) } getOrElse {Nil},
        __obj.DELETE_BEFORE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DELETE_BEFORE"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopAddListColumnRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.AddListColumnRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("AddListColumnRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.AddListColumnRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN_TYPE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DEFAULT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "SELECTION_VALUES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.AddListColumnRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.ListColumnType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[silverpop.SelectionValuesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.AddListColumnRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[String](__obj.COLUMN_NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN_NAME"), __scope, false),
        scalaxb.toXML[silverpop.ListColumnType](__obj.COLUMN_TYPE, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN_TYPE"), __scope, false),
        __obj.DEFAULT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DEFAULT"), __scope, false) } getOrElse {Nil},
        __obj.SELECTION_VALUES map { scalaxb.toXML[silverpop.SelectionValuesElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("SELECTION_VALUES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopCreateTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.CreateTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("CreateTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CreateTableRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMNS")) ^^
      { case p1 ~ p2 =>
      silverpop.CreateTableRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.TableColumnsElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.CreateTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TABLE_NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_NAME"), __scope, false),
        scalaxb.toXML[silverpop.TableColumnsElementType](__obj.COLUMNS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMNS"), __scope, false))

  }

  trait DefaultSilverpopInsertUpdateRelationalTableRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.InsertUpdateRelationalTableRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("InsertUpdateRelationalTableRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.InsertUpdateRelationalTableRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ROWS")) ^^
      { case p1 ~ p2 =>
      silverpop.InsertUpdateRelationalTableRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.RowsElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.InsertUpdateRelationalTableRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.TABLE_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false),
        scalaxb.toXML[silverpop.RowsElementType](__obj.ROWS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ROWS"), __scope, false))

  }

  trait DefaultSilverpopDeleteRelationalTableDataRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteRelationalTableDataRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("DeleteRelationalTableDataRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteRelationalTableDataRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "TABLE_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "ROWS")) ^^
      { case p1 ~ p2 =>
      silverpop.DeleteRelationalTableDataRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.DeleteRowsElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.DeleteRelationalTableDataRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.TABLE_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("TABLE_ID"), __scope, false),
        scalaxb.toXML[silverpop.DeleteRowsElementType](__obj.ROWS, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("ROWS"), __scope, false))

  }

  trait DefaultSilverpopCreateContactListRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.CreateContactListRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("CreateContactListRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CreateContactListRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "DATABASE_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CONTACT_LIST_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "VISIBILITY")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.CreateContactListRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.VisibilityType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.CreateContactListRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.DATABASE_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("DATABASE_ID"), __scope, false),
        scalaxb.toXML[String](__obj.CONTACT_LIST_NAME, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CONTACT_LIST_NAME"), __scope, false),
        scalaxb.toXML[silverpop.VisibilityType](__obj.VISIBILITY, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("VISIBILITY"), __scope, false))

  }

  trait DefaultSilverpopAddContactToContactListRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.AddContactToContactListRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("AddContactToContactListRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.AddContactToContactListRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CONTACT_LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CONTACT_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "COLUMN")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.AddContactToContactListRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[silverpop.ColumnNameValueElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.AddContactToContactListRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.CONTACT_LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CONTACT_LIST_ID"), __scope, false),
        __obj.CONTACT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CONTACT_ID"), __scope, false) } getOrElse {Nil},
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnNameValueElementType](_, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("COLUMN"), __scope, false) })

  }

  trait DefaultSilverpopAddContactToProgramRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.AddContactToProgramRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.UserActions")
    
    override def typeName: Option[String] = Some("AddContactToProgramRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.AddContactToProgramRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "PROGRAM_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.UserActions"), "CONTACT_ID")) ^^
      { case p1 ~ p2 =>
      silverpop.AddContactToProgramRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.AddContactToProgramRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.PROGRAM_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("PROGRAM_ID"), __scope, false),
        scalaxb.toXML[Long](__obj.CONTACT_ID, Some("SilverpopApi:EngageService.ListMgmt.UserActions"), Some("CONTACT_ID"), __scope, false))

  }

  def buildSilverpopEmailTypeFormat = new DefaultSilverpopEmailTypeFormat {}
  trait DefaultSilverpopEmailTypeFormat extends scalaxb.XMLFormat[silverpop.EmailType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.EmailType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.EmailType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.EmailType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.EmailType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopCreatedFromFormat = new DefaultSilverpopCreatedFromFormat {}
  trait DefaultSilverpopCreatedFromFormat extends scalaxb.XMLFormat[silverpop.CreatedFrom] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.CreatedFrom] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.CreatedFrom.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.CreatedFrom.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.CreatedFrom, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSilverpopFaultErrorTypeType4Format extends scalaxb.ElemNameParser[silverpop.FaultErrorTypeType4] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorTypeType4] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeType4Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorTypeType4(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorTypeType4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypetype4sequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeType4Sequence1](_, None, Some("faulterrortypetype4sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeType4Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeType4Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeType4Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeType4Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeType4Format extends scalaxb.ElemNameParser[silverpop.FaultDetailTypeType4] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailTypeType4] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeType4Sequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorTypeType4](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailTypeType4(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailTypeType4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypetype4sequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeType4Sequence1](_, None, Some("faultdetailtypetype4sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeType4Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeType4Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeType4Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeType4Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorTypeType4](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeType4Format extends scalaxb.ElemNameParser[silverpop.FaultTypeType4] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultTypeType4] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeType4Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailTypeType4](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultTypeType4(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultTypeType4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypetype4sequence1 map { scalaxb.toXML[silverpop.FaultTypeType4Sequence1](_, None, Some("faulttypetype4sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeType4Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeType4Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeType4Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeType4Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailTypeType4](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopListMgmtResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.ListMgmtResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("ListMgmtResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ListMgmtResponseType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "Fault")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "Email")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "RecipientId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "EmailType")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LastModified")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "CreatedFrom")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "OptedIn")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "OptedOut")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ResumeSendDate")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ORGANIZATION_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "VISITOR_ASSOCIATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMNS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "CONTACT_LISTS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      silverpop.ListMgmtResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[silverpop.FaultTypeType4](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[silverpop.EmailType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[silverpop.CreatedFrom](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[silverpop.ColumnsElementTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[silverpop.ContactListsElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ListMgmtResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SUCCESS map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SUCCESS"), __scope, false) } getOrElse {Nil},
        __obj.Fault map { scalaxb.toXML[silverpop.FaultTypeType4](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("Fault"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.Email map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("Email"), __scope, false) } getOrElse {Nil},
        __obj.RecipientId map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("RecipientId"), __scope, false) } getOrElse {Nil},
        __obj.EmailType map { scalaxb.toXML[silverpop.EmailType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("EmailType"), __scope, false) } getOrElse {Nil},
        __obj.LastModified map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LastModified"), __scope, false) } getOrElse {Nil},
        __obj.CreatedFrom map { scalaxb.toXML[silverpop.CreatedFrom](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("CreatedFrom"), __scope, false) } getOrElse {Nil},
        __obj.OptedIn map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("OptedIn"), __scope, false) } getOrElse {Nil},
        __obj.OptedOut map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("OptedOut"), __scope, false) } getOrElse {Nil},
        __obj.ResumeSendDate map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ResumeSendDate"), __scope, false) } getOrElse {Nil},
        __obj.ORGANIZATION_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ORGANIZATION_ID"), __scope, false) } getOrElse {Nil},
        __obj.VISITOR_ASSOCIATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("VISITOR_ASSOCIATION"), __scope, false) } getOrElse {Nil},
        __obj.COLUMNS map { scalaxb.toXML[silverpop.ColumnsElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMNS"), __scope, false) } getOrElse {Nil},
        __obj.CONTACT_LISTS map { scalaxb.toXML[silverpop.ContactListsElementType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("CONTACT_LISTS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopAddRecipientRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.AddRecipientRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("AddRecipientRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.AddRecipientRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "CREATED_FROM")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SEND_AUTOREPLY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "UPDATE_IF_FOUND")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ALLOW_HTML")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SYNC_FIELDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "VISITOR_KEY")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.AddRecipientRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.CreatedFrom](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack),
        p6.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[silverpop.SyncFieldsElementType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.AddRecipientRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[silverpop.CreatedFrom](__obj.CREATED_FROM, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("CREATED_FROM"), __scope, false),
        scalaxb.toXML[Boolean](__obj.SEND_AUTOREPLY, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SEND_AUTOREPLY"), __scope, false),
        scalaxb.toXML[Boolean](__obj.UPDATE_IF_FOUND, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("UPDATE_IF_FOUND"), __scope, false),
        scalaxb.toXML[Boolean](__obj.ALLOW_HTML, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ALLOW_HTML"), __scope, false),
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) },
        __obj.SYNC_FIELDS map { scalaxb.toXML[silverpop.SyncFieldsElementType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SYNC_FIELDS"), __scope, false) } getOrElse {Nil},
        __obj.VISITOR_KEY map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("VISITOR_KEY"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopOptOutRecipientRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.OptOutRecipientRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("OptOutRecipientRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.OptOutRecipientRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "EMAIL")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "RECIPIENT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "JOB_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      silverpop.OptOutRecipientRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.OptOutRecipientRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LIST_ID"), __scope, false),
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) },
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.RECIPIENT_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("RECIPIENT_ID"), __scope, false) } getOrElse {Nil},
        __obj.JOB_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("JOB_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopUpdateRecipientRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.UpdateRecipientRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("UpdateRecipientRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.UpdateRecipientRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "OLD_EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "RECIPIENT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ENCODED_RECIPIENT_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SEND_AUTOREPLY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ALLOW_HTML")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SYNC_FIELDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "VISITOR_KEY")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      silverpop.UpdateRecipientRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack),
        p7.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[silverpop.SyncFieldsElementType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.UpdateRecipientRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LIST_ID"), __scope, false),
        __obj.OLD_EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("OLD_EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.RECIPIENT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("RECIPIENT_ID"), __scope, false) } getOrElse {Nil},
        __obj.ENCODED_RECIPIENT_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ENCODED_RECIPIENT_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.SEND_AUTOREPLY, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SEND_AUTOREPLY"), __scope, false),
        scalaxb.toXML[Boolean](__obj.ALLOW_HTML, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ALLOW_HTML"), __scope, false),
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) },
        __obj.SYNC_FIELDS map { scalaxb.toXML[silverpop.SyncFieldsElementType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SYNC_FIELDS"), __scope, false) } getOrElse {Nil},
        __obj.VISITOR_KEY map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("VISITOR_KEY"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopSelectRecipientRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.SelectRecipientRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("SelectRecipientRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SelectRecipientRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ENCODED_RECIPIENT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "RETURN_CONTACT_LISTS")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.SelectRecipientRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.SelectRecipientRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LIST_ID"), __scope, false),
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.ENCODED_RECIPIENT_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ENCODED_RECIPIENT_ID"), __scope, false) } getOrElse {Nil},
        __obj.RETURN_CONTACT_LISTS map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("RETURN_CONTACT_LISTS"), __scope, false) } getOrElse {Nil},
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) })

  }

  trait DefaultSilverpopDoubleOptInRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.DoubleOptInRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("DoubleOptInRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DoubleOptInRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SEND_AUTOREPLY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "ALLOW_HTML")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "TABLES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.DoubleOptInRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[silverpop.TablesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.DoubleOptInRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[Boolean](__obj.SEND_AUTOREPLY, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SEND_AUTOREPLY"), __scope, false),
        scalaxb.toXML[Boolean](__obj.ALLOW_HTML, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("ALLOW_HTML"), __scope, false),
        __obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) },
        __obj.TABLES map { scalaxb.toXML[silverpop.TablesElementType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("TABLES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopColumnsElementTypeType2Format extends scalaxb.ElemNameParser[silverpop.ColumnsElementTypeType2] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("ColumnsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnsElementTypeType2] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ^^
      { case p1 =>
      silverpop.ColumnsElementTypeType2(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ColumnsElementTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopContactListsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ContactListsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("ContactListsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ContactListsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "CONTACT_LIST_ID")) ^^
      { case p1 =>
      silverpop.ContactListsElementType(p1.toSeq map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ContactListsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CONTACT_LIST_ID flatMap { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("CONTACT_LIST_ID"), __scope, false) })
  }

  trait DefaultSilverpopSyncFieldsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.SyncFieldsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("SyncFieldsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SyncFieldsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "SYNC_FIELD")) ^^
      { case p1 =>
      silverpop.SyncFieldsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.SyncFieldsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SYNC_FIELD flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("SYNC_FIELD"), __scope, false) })
  }

  trait DefaultSilverpopTableColumnsElementTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.TableColumnsElementTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("TableColumnsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TableColumnsElementTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "COLUMN")) ^^
      { case p1 =>
      silverpop.TableColumnsElementTypeType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnElementTypeType2](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.TableColumnsElementTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementTypeType2](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopTableElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TableElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("TableElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TableElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "TABLE_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "TABLE_COLUMNS")) ^^
      { case p1 ~ p2 =>
      silverpop.TableElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.TableColumnsElementTypeType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.TableElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TABLE_NAME, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("TABLE_NAME"), __scope, false),
        scalaxb.toXML[silverpop.TableColumnsElementTypeType](__obj.TABLE_COLUMNS, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("TABLE_COLUMNS"), __scope, false))

  }

  trait DefaultSilverpopColumnElementTypeType2Format extends scalaxb.ElemNameParser[silverpop.ColumnElementTypeType2] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("ColumnElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnElementTypeType2] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "VALUE")) ^^
      { case p1 ~ p2 =>
      silverpop.ColumnElementTypeType2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ColumnElementTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.NAME, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("NAME"), __scope, false),
        scalaxb.toXML[String](__obj.VALUE, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("VALUE"), __scope, false))

  }

  trait DefaultSilverpopTablesElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TablesElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.ListMgmt.RecipientActions")
    
    override def typeName: Option[String] = Some("TablesElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TablesElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), "TABLE")) ^^
      { case p1 =>
      silverpop.TablesElementType(p1.toSeq map { scalaxb.fromXML[silverpop.TableElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.TablesElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TABLE flatMap { scalaxb.toXML[silverpop.TableElementType](_, Some("SilverpopApi:EngageService.ListMgmt.RecipientActions"), Some("TABLE"), __scope, false) })
  }

  def buildSilverpopVisibilityFormat = new DefaultSilverpopVisibilityFormat {}
  trait DefaultSilverpopVisibilityFormat extends scalaxb.XMLFormat[silverpop.Visibility] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.Visibility] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.Visibility.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.Visibility.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.Visibility, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopTemplateVisibilityFormat = new DefaultSilverpopTemplateVisibilityFormat {}
  trait DefaultSilverpopTemplateVisibilityFormat extends scalaxb.XMLFormat[silverpop.TemplateVisibility] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.TemplateVisibility] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.TemplateVisibility.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.TemplateVisibility.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.TemplateVisibility, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopExpressionTypeFormat = new DefaultSilverpopExpressionTypeFormat {}
  trait DefaultSilverpopExpressionTypeFormat extends scalaxb.XMLFormat[silverpop.ExpressionType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ExpressionType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ExpressionType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ExpressionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ExpressionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopOperatorsFormat = new DefaultSilverpopOperatorsFormat {}
  trait DefaultSilverpopOperatorsFormat extends scalaxb.XMLFormat[silverpop.Operators] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.Operators] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.Operators.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.Operators.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.Operators, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopAndOrFormat = new DefaultSilverpopAndOrFormat {}
  trait DefaultSilverpopAndOrFormat extends scalaxb.XMLFormat[silverpop.AndOr] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.AndOr] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.AndOr.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.AndOr.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.AndOr, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopContentAreaTypeFormat = new DefaultSilverpopContentAreaTypeFormat {}
  trait DefaultSilverpopContentAreaTypeFormat extends scalaxb.XMLFormat[silverpop.ContentAreaType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ContentAreaType] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.ContentAreaType.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.ContentAreaType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.ContentAreaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopSendTimeOptimizationFormat = new DefaultSilverpopSendTimeOptimizationFormat {}
  trait DefaultSilverpopSendTimeOptimizationFormat extends scalaxb.XMLFormat[silverpop.SendTimeOptimization] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.SendTimeOptimization] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.SendTimeOptimization.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.SendTimeOptimization.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.SendTimeOptimization, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSilverpopFaultErrorTypeType2Format extends scalaxb.ElemNameParser[silverpop.FaultErrorTypeType2] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorTypeType2] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeType2Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorTypeType2(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypetype2sequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeType2Sequence1](_, None, Some("faulterrortypetype2sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeType2Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeType2Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeType2Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeType2Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeType2Format extends scalaxb.ElemNameParser[silverpop.FaultDetailTypeType2] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailTypeType2] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeType2Sequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorTypeType2](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailTypeType2(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypetype2sequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeType2Sequence1](_, None, Some("faultdetailtypetype2sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeType2Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeType2Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeType2Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeType2Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorTypeType2](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeType2Format extends scalaxb.ElemNameParser[silverpop.FaultTypeType2] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultTypeType2] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeType2Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailTypeType2](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultTypeType2(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypetype2sequence1 map { scalaxb.toXML[silverpop.FaultTypeType2Sequence1](_, None, Some("faulttypetype2sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeType2Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeType2Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeType2Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeType2Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailTypeType2](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopScheduleMailingRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ScheduleMailingRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ScheduleMailingRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ScheduleMailingRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "TEMPLATE_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SEND_HTML")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SEND_AOL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SEND_TEXT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUBJECT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FROM_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FROM_ADDRESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "REPLY_TO")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "VISIBILITY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "INBOX_MONITOR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SEND_TIME_OPTIMIZATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "WA_MAILINGLEVEL_CODE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUPPRESSION_LISTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUBSTITUTIONS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      silverpop.ScheduleMailingRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.Visibility](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[silverpop.SendTimeOptimization](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[silverpop.SuppressionListsElementType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[silverpop.SubstitutionsElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ScheduleMailingRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.TEMPLATE_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("TEMPLATE_ID"), __scope, false),
        scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[String](__obj.MAILING_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_NAME"), __scope, false),
        __obj.SEND_HTML map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SEND_HTML"), __scope, false) } getOrElse {Nil},
        __obj.SEND_AOL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SEND_AOL"), __scope, false) } getOrElse {Nil},
        __obj.SEND_TEXT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SEND_TEXT"), __scope, false) } getOrElse {Nil},
        __obj.SUBJECT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUBJECT"), __scope, false) } getOrElse {Nil},
        __obj.FROM_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FROM_NAME"), __scope, false) } getOrElse {Nil},
        __obj.FROM_ADDRESS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FROM_ADDRESS"), __scope, false) } getOrElse {Nil},
        __obj.REPLY_TO map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("REPLY_TO"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.Visibility](__obj.VISIBILITY, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("VISIBILITY"), __scope, false),
        scalaxb.toXML[String](__obj.SCHEDULED, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SCHEDULED"), __scope, false),
        __obj.INBOX_MONITOR map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("INBOX_MONITOR"), __scope, false) } getOrElse {Nil},
        __obj.SEND_TIME_OPTIMIZATION map { scalaxb.toXML[silverpop.SendTimeOptimization](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SEND_TIME_OPTIMIZATION"), __scope, false) } getOrElse {Nil},
        __obj.WA_MAILINGLEVEL_CODE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("WA_MAILINGLEVEL_CODE"), __scope, false) } getOrElse {Nil},
        __obj.SUPPRESSION_LISTS map { scalaxb.toXML[silverpop.SuppressionListsElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUPPRESSION_LISTS"), __scope, false) } getOrElse {Nil},
        __obj.SUBSTITUTIONS map { scalaxb.toXML[silverpop.SubstitutionsElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUBSTITUTIONS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopPreviewMailingRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.PreviewMailingRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("PreviewMailingRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.PreviewMailingRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MailingId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RecipientEmail")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CRM_SYNC_ID")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.PreviewMailingRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.PreviewMailingRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MailingId"), __scope, false),
        __obj.RecipientEmail map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RecipientEmail"), __scope, false) } getOrElse {Nil},
        __obj.CRM_SYNC_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CRM_SYNC_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopMailMgmtUserActionsResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.MailMgmtUserActionsResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("MailMgmtUserActionsResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MailMgmtUserActionsResponseType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "Fault")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "JOB_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FILE_NAME")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FILE_PATH")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_TEMPLATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "HTMLBody")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "AOLBody")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "TextBody")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SpamScore")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      silverpop.MailMgmtUserActionsResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[silverpop.FaultTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[silverpop.RulesetElementType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[silverpop.MailingTemplateElementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.MailMgmtUserActionsResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SUCCESS map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUCCESS"), __scope, false) } getOrElse {Nil},
        __obj.Fault map { scalaxb.toXML[silverpop.FaultTypeType2](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("Fault"), __scope, false) } getOrElse {Nil},
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.RULESET_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false) } getOrElse {Nil},
        __obj.JOB_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("JOB_ID"), __scope, false) } getOrElse {Nil},
        __obj.FILE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FILE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.RULESET flatMap { scalaxb.toXML[silverpop.RulesetElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET"), __scope, false) },
        __obj.FILE_PATH map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FILE_PATH"), __scope, false) } getOrElse {Nil},
        __obj.MAILING_TEMPLATE flatMap { scalaxb.toXML[silverpop.MailingTemplateElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_TEMPLATE"), __scope, false) },
        __obj.HTMLBody map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("HTMLBody"), __scope, false) } getOrElse {Nil},
        __obj.AOLBody map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("AOLBody"), __scope, false) } getOrElse {Nil},
        __obj.TextBody map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("TextBody"), __scope, false) } getOrElse {Nil},
        __obj.SpamScore map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SpamScore"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopSuppressionListsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.SuppressionListsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("SuppressionListsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SuppressionListsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUPPRESSION_LIST_ID")) ^^
      { case p1 =>
      silverpop.SuppressionListsElementType(p1.toSeq map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.SuppressionListsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SUPPRESSION_LIST_ID flatMap { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUPPRESSION_LIST_ID"), __scope, false) })
  }

  trait DefaultSilverpopSubstitutionsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.SubstitutionsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("SubstitutionsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SubstitutionsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUBSTITUTION")) ^^
      { case p1 =>
      silverpop.SubstitutionsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.SubstitutionElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.SubstitutionsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SUBSTITUTION flatMap { scalaxb.toXML[silverpop.SubstitutionElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUBSTITUTION"), __scope, false) })
  }

  trait DefaultSilverpopSubstitutionElementTypeFormat extends scalaxb.ElemNameParser[silverpop.SubstitutionElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("SubstitutionElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SubstitutionElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "VALUE")) ^^
      { case p1 ~ p2 =>
      silverpop.SubstitutionElementType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.SubstitutionElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("NAME"), __scope, false) } getOrElse {Nil},
        __obj.VALUE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("VALUE"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopAddDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.AddDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("AddDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.AddDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LIST_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENT_AREAS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.AddDCRulesetRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.ContentAreasElementType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[silverpop.RulesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.AddDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LIST_ID"), __scope, false),
        scalaxb.toXML[String](__obj.RULESET_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_NAME"), __scope, false),
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.CONTENT_AREAS map { scalaxb.toXML[silverpop.ContentAreasElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENT_AREAS"), __scope, false) } getOrElse {Nil},
        __obj.RULES map { scalaxb.toXML[silverpop.RulesElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopContentAreasElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ContentAreasElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ContentAreasElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ContentAreasElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENT_AREA")) ^^
      { case p1 =>
      silverpop.ContentAreasElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ContentAreaElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ContentAreasElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CONTENT_AREA flatMap { scalaxb.toXML[silverpop.ContentAreaElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENT_AREA"), __scope, false) })
  }

  trait DefaultSilverpopContentAreaElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ContentAreaElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ContentAreaElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ContentAreaElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "DEFAULT_CONTENT")) ^^
      { case p1 =>
      silverpop.ContentAreaElementType(scalaxb.fromXML[silverpop.DefaultContentElementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.ContentAreaType]((node \ "@type"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: silverpop.ContentAreaElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: silverpop.ContentAreaElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[silverpop.DefaultContentElementType](__obj.DEFAULT_CONTENT, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("DEFAULT_CONTENT"), __scope, false))
  }

  trait DefaultSilverpopDefaultContentElementTypeFormat extends scalaxb.XMLFormat[silverpop.DefaultContentElementType] with scalaxb.CanWriteChildNodes[silverpop.DefaultContentElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.DefaultContentElementType] = seq match {
      case node: scala.xml.Node => Right(silverpop.DefaultContentElementType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: silverpop.DefaultContentElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }
    def writesChildNodes(__obj: silverpop.DefaultContentElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSilverpopRulesElementTypeFormat extends scalaxb.ElemNameParser[silverpop.RulesElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("RulesElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RulesElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULE")) ^^
      { case p1 =>
      silverpop.RulesElementType(p1.toSeq map { scalaxb.fromXML[silverpop.RuleElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.RulesElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RULE flatMap { scalaxb.toXML[silverpop.RuleElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULE"), __scope, false) })
  }

  trait DefaultSilverpopRuleElementTypeFormat extends scalaxb.ElemNameParser[silverpop.RuleElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("RuleElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RuleElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULE_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "PRIORITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CRITERIA")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENTS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.RuleElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[silverpop.CriteriaElementType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.ContentsElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.RuleElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RULE_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULE_NAME"), __scope, false),
        scalaxb.toXML[Int](__obj.PRIORITY, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("PRIORITY"), __scope, false),
        __obj.CRITERIA map { scalaxb.toXML[silverpop.CriteriaElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CRITERIA"), __scope, false) } getOrElse {Nil},
        __obj.CONTENTS map { scalaxb.toXML[silverpop.ContentsElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENTS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopCriteriaElementTypeFormat extends scalaxb.ElemNameParser[silverpop.CriteriaElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("CriteriaElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.CriteriaElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "EXPRESSION")) ^^
      { case p1 =>
      silverpop.CriteriaElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ExpressionElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.CriteriaElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EXPRESSION flatMap { scalaxb.toXML[silverpop.ExpressionElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("EXPRESSION"), __scope, false) })
  }

  trait DefaultSilverpopExpressionElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ExpressionElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ExpressionElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExpressionElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "AND_OR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LEFT_PARENS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "TYPE")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "COLUMN_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "OPERATORS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "VALUES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RIGHT_PARENS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      silverpop.ExpressionElementType(p1.headOption map { scalaxb.fromXML[silverpop.AndOr](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.ExpressionType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.Operators](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExpressionElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AND_OR map { scalaxb.toXML[silverpop.AndOr](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("AND_OR"), __scope, false) } getOrElse {Nil},
        __obj.LEFT_PARENS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LEFT_PARENS"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.ExpressionType](__obj.TYPE, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("TYPE"), __scope, false),
        scalaxb.toXML[String](__obj.COLUMN_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("COLUMN_NAME"), __scope, false),
        scalaxb.toXML[silverpop.Operators](__obj.OPERATORS, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("OPERATORS"), __scope, false),
        scalaxb.toXML[String](__obj.VALUES, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("VALUES"), __scope, false),
        __obj.RIGHT_PARENS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RIGHT_PARENS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopContentsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ContentsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ContentsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ContentsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENT")) ^^
      { case p1 =>
      silverpop.ContentsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ContentElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ContentsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CONTENT flatMap { scalaxb.toXML[silverpop.ContentElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENT"), __scope, false) })
  }

  trait DefaultSilverpopContentElementTypeFormat extends scalaxb.XMLFormat[silverpop.ContentElementType] with scalaxb.CanWriteChildNodes[silverpop.ContentElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ContentElementType] = seq match {
      case node: scala.xml.Node => Right(silverpop.ContentElementType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@content_area").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: silverpop.ContentElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.content_area foreach { x => attr = scala.xml.Attribute(null, "content_area", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: silverpop.ContentElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSilverpopImportDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ImportDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ImportDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ImportDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FILE_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.ImportDCRulesetRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ImportDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.FILE_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FILE_NAME"), __scope, false),
        scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LIST_ID"), __scope, false),
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.RULESET_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopExportDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ExportDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ExportDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExportDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MOVE_TO_FTP")) ^^
      { case p1 ~ p2 =>
      silverpop.ExportDCRulesetRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExportDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.RULESET_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false),
        __obj.MOVE_TO_FTP map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MOVE_TO_FTP"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopListDCRulesetsForMailingRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ListDCRulesetsForMailingRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ListDCRulesetsForMailingRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ListDCRulesetsForMailingRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ^^
      { case p1 =>
      silverpop.ListDCRulesetsForMailingRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ListDCRulesetsForMailingRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.MAILING_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false))
  }

  trait DefaultSilverpopRulesetElementTypeFormat extends scalaxb.ElemNameParser[silverpop.RulesetElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("RulesetElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RulesetElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_NAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENT_AREAS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULES")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.RulesetElementType(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[silverpop.ContentAreasElementType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[silverpop.RulesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.RulesetElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RULESET_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false) } getOrElse {Nil},
        __obj.LIST_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LIST_ID"), __scope, false) } getOrElse {Nil},
        __obj.RULESET_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_NAME"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[silverpop.ContentAreasElementType](__obj.CONTENT_AREAS, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENT_AREAS"), __scope, false),
        __obj.RULES map { scalaxb.toXML[silverpop.RulesElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("GetDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ^^
      { case p1 =>
      silverpop.GetDCRulesetRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.GetDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.RULESET_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false))
  }

  trait DefaultSilverpopReplaceDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ReplaceDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ReplaceDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ReplaceDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "CONTENT_AREAS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULES")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.ReplaceDCRulesetRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[silverpop.ContentAreasElementType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.RulesElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ReplaceDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.RULESET_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false),
        __obj.CONTENT_AREAS map { scalaxb.toXML[silverpop.ContentAreasElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("CONTENT_AREAS"), __scope, false) } getOrElse {Nil},
        __obj.RULES map { scalaxb.toXML[silverpop.RulesElementType](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopValidateDCMailingRulesetTypeFormat extends scalaxb.ElemNameParser[silverpop.ValidateDCMailingRulesetType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ValidateDCMailingRulesetType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ValidateDCMailingRulesetType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ^^
      { case p1 =>
      silverpop.ValidateDCMailingRulesetType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ValidateDCMailingRulesetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.MAILING_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false))
  }

  trait DefaultSilverpopDeleteDCRulesetRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteDCRulesetRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("DeleteDCRulesetRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteDCRulesetRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "RULESET_ID")) ^^
      { case p1 =>
      silverpop.DeleteDCRulesetRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.DeleteDCRulesetRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.RULESET_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("RULESET_ID"), __scope, false))
  }

  trait DefaultSilverpopExportMailingTemplateRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ExportMailingTemplateRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("ExportMailingTemplateRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ExportMailingTemplateRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "TEMPLATE_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ADD_TO_STORED_FILES")) ^^
      { case p1 ~ p2 =>
      silverpop.ExportMailingTemplateRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ExportMailingTemplateRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.TEMPLATE_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("TEMPLATE_ID"), __scope, false),
        __obj.ADD_TO_STORED_FILES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("ADD_TO_STORED_FILES"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetMailingTemplatesRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetMailingTemplatesRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("GetMailingTemplatesRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetMailingTemplatesRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "VISIBILITY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LAST_MODIFIED_START_DATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LAST_MODIFIED_END_DATE")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.GetMailingTemplatesRequestType(scalaxb.fromXML[silverpop.Visibility](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetMailingTemplatesRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.Visibility](__obj.VISIBILITY, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("VISIBILITY"), __scope, false),
        __obj.LAST_MODIFIED_START_DATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LAST_MODIFIED_START_DATE"), __scope, false) } getOrElse {Nil},
        __obj.LAST_MODIFIED_END_DATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LAST_MODIFIED_END_DATE"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopMailingTemplateElementTypeFormat extends scalaxb.ElemNameParser[silverpop.MailingTemplateElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement.UserActions")
    
    override def typeName: Option[String] = Some("MailingTemplateElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MailingTemplateElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "MAILING_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "SUBJECT")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "LAST_MODIFIED")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "VISIBILITY")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "USER_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "FLAGGED_FOR_BACKUP")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement.UserActions"), "ALLOW_CRM_BLOCK")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.MailingTemplateElementType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[silverpop.TemplateVisibility](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.MailingTemplateElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MAILING_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_ID"), __scope, false),
        scalaxb.toXML[String](__obj.MAILING_NAME, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("MAILING_NAME"), __scope, false),
        __obj.SUBJECT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("SUBJECT"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.LAST_MODIFIED, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("LAST_MODIFIED"), __scope, false),
        scalaxb.toXML[silverpop.TemplateVisibility](__obj.VISIBILITY, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("VISIBILITY"), __scope, false),
        scalaxb.toXML[String](__obj.USER_ID, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("USER_ID"), __scope, false),
        scalaxb.toXML[String](__obj.FLAGGED_FOR_BACKUP, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("FLAGGED_FOR_BACKUP"), __scope, false),
        __obj.ALLOW_CRM_BLOCK map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement.UserActions"), Some("ALLOW_CRM_BLOCK"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopFaultErrorTypeType5Format extends scalaxb.ElemNameParser[silverpop.FaultErrorTypeType5] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorTypeType5] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeType5Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorTypeType5(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorTypeType5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypetype5sequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeType5Sequence1](_, None, Some("faulterrortypetype5sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeType5Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeType5Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeType5Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeType5Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeType5Format extends scalaxb.ElemNameParser[silverpop.FaultDetailTypeType5] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailTypeType5] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeType5Sequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorTypeType5](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailTypeType5(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailTypeType5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypetype5sequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeType5Sequence1](_, None, Some("faultdetailtypetype5sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeType5Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeType5Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeType5Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeType5Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorTypeType5](_, Some("SilverpopApi:EngageService.MailManagement"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeType5Format extends scalaxb.ElemNameParser[silverpop.FaultTypeType5] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultTypeType5] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeType5Sequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailTypeType5](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultTypeType5(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultTypeType5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypetype5sequence1 map { scalaxb.toXML[silverpop.FaultTypeType5Sequence1](_, None, Some("faulttypetype5sequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeType5Sequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeType5Sequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeType5Sequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeType5Sequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailTypeType5](_, Some("SilverpopApi:EngageService.MailManagement"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopSendMailingRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.SendMailingRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("SendMailingRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SendMailingRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "MailingId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "RecipientEmail")) ^^
      { case p1 ~ p2 =>
      silverpop.SendMailingRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.SendMailingRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.MailManagement"), Some("MailingId"), __scope, false),
        scalaxb.toXML[String](__obj.RecipientEmail, Some("SilverpopApi:EngageService.MailManagement"), Some("RecipientEmail"), __scope, false))

  }

  trait DefaultSilverpopSendMailingResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.SendMailingResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("SendMailingResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SendMailingResponseType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "Fault")) ^^
      { case p1 ~ p2 =>
      silverpop.SendMailingResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[silverpop.FaultTypeType5](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.SendMailingResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SUCCESS map { scalaxb.toXML[Boolean](_, Some("SilverpopApi:EngageService.MailManagement"), Some("SUCCESS"), __scope, false) } getOrElse {Nil},
        __obj.Fault map { scalaxb.toXML[silverpop.FaultTypeType5](_, Some("SilverpopApi:EngageService.MailManagement"), Some("Fault"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopForwardToFriendRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.ForwardToFriendRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    
    override def typeName: Option[String] = Some("ForwardToFriendRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ForwardToFriendRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "SENDER_EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "rs")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "r")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "m")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "RECIPIENTS")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.MailManagement"), "MESSAGE")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      silverpop.ForwardToFriendRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ForwardToFriendRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.SENDER_EMAIL, Some("SilverpopApi:EngageService.MailManagement"), Some("SENDER_EMAIL"), __scope, false),
        __obj.rs map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.MailManagement"), Some("rs"), __scope, false) } getOrElse {Nil},
        __obj.r map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.MailManagement"), Some("r"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Long](__obj.m, Some("SilverpopApi:EngageService.MailManagement"), Some("m"), __scope, false),
        scalaxb.toXML[String](__obj.RECIPIENTS, Some("SilverpopApi:EngageService.MailManagement"), Some("RECIPIENTS"), __scope, false),
        scalaxb.toXML[String](__obj.MESSAGE, Some("SilverpopApi:EngageService.MailManagement"), Some("MESSAGE"), __scope, false))

  }

  trait DefaultSilverpopForwardToFriendResponseTypeFormat extends scalaxb.XMLFormat[silverpop.ForwardToFriendResponseType] with scalaxb.CanWriteChildNodes[silverpop.ForwardToFriendResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.MailManagement")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.ForwardToFriendResponseType] = seq match {
      case node: scala.xml.Node => Right(silverpop.ForwardToFriendResponseType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: silverpop.ForwardToFriendResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  def buildSilverpopFileEncodingFormat = new DefaultSilverpopFileEncodingFormat {}
  trait DefaultSilverpopFileEncodingFormat extends scalaxb.XMLFormat[silverpop.FileEncoding] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FileEncoding] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.FileEncoding.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.FileEncoding.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.FileEncoding, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopEventExportFormatFormat = new DefaultSilverpopEventExportFormatFormat {}
  trait DefaultSilverpopEventExportFormatFormat extends scalaxb.XMLFormat[silverpop.EventExportFormat] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.EventExportFormat] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.EventExportFormat.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.EventExportFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.EventExportFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopPrivateSharedFormat = new DefaultSilverpopPrivateSharedFormat {}
  trait DefaultSilverpopPrivateSharedFormat extends scalaxb.XMLFormat[silverpop.PrivateShared] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.PrivateShared] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.PrivateShared.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.PrivateShared.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.PrivateShared, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopJobStatusFormat = new DefaultSilverpopJobStatusFormat {}
  trait DefaultSilverpopJobStatusFormat extends scalaxb.XMLFormat[silverpop.JobStatus] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.JobStatus] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.JobStatus.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.JobStatus.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.JobStatus, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSilverpopMetricsExportFormatFormat = new DefaultSilverpopMetricsExportFormatFormat {}
  trait DefaultSilverpopMetricsExportFormatFormat extends scalaxb.XMLFormat[silverpop.MetricsExportFormat] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MetricsExportFormat] = seq match {
      case elem: scala.xml.Elem => Right(silverpop.MetricsExportFormat.fromString(elem.text, elem.scope))
      case _ => Right(silverpop.MetricsExportFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: silverpop.MetricsExportFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSilverpopFaultErrorTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultErrorTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorTypeType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeTypeSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorTypeType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypetypesequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeTypeSequence1](_, None, Some("faulterrortypetypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultDetailTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailTypeType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeTypeSequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorTypeType](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailTypeType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypetypesequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeTypeSequence1](_, None, Some("faultdetailtypetypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorTypeType](_, Some("SilverpopApi:EngageService.Reporting"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultTypeType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultTypeType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeTypeSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailTypeType](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultTypeType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypetypesequence1 map { scalaxb.toXML[silverpop.FaultTypeTypeSequence1](_, None, Some("faulttypetypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailTypeType](_, Some("SilverpopApi:EngageService.Reporting"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopTrackingMetricExportRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.TrackingMetricExportRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("TrackingMetricExportRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TrackingMetricExportRequestType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPORT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXPORT_FORMAT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SEND_DATE_START")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SEND_DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MOVE_TO_FTP")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ALL_AGGREGATE_METRICS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_SUMMARY")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ALL_METRICS_FORWARDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_CLICKS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_CLICKSTREAMS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_CONVERSIONS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_ATTACHMENTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_MEDIA")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AGGREGATE_SUPPRESSIONS ")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAIL_TRACK_INTERVAL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TOP_DOMAINS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXCLUDE_IM_FROM_METRICS")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      silverpop.TrackingMetricExportRequestType(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.MetricsExportFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.TrackingMetricExportRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.REPORT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPORT_ID"), __scope, false) } getOrElse {Nil},
        __obj.EXPORT_FORMAT map { scalaxb.toXML[silverpop.MetricsExportFormat](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXPORT_FORMAT"), __scope, false) } getOrElse {Nil},
        __obj.LIST_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("LIST_ID"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.SEND_DATE_START map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SEND_DATE_START"), __scope, false) } getOrElse {Nil},
        __obj.SEND_DATE_END map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SEND_DATE_END"), __scope, false) } getOrElse {Nil},
        __obj.MOVE_TO_FTP map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MOVE_TO_FTP"), __scope, false) } getOrElse {Nil},
        __obj.ALL_AGGREGATE_METRICS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ALL_AGGREGATE_METRICS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_SUMMARY map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_SUMMARY"), __scope, false) } getOrElse {Nil},
        __obj.ALL_METRICS_FORWARDS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ALL_METRICS_FORWARDS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_CLICKS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_CLICKS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_CLICKSTREAMS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_CLICKSTREAMS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_CONVERSIONS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_CONVERSIONS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_ATTACHMENTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_ATTACHMENTS"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_MEDIA map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_MEDIA"), __scope, false) } getOrElse {Nil},
        __obj.AGGREGATE_SUPPRESSIONS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AGGREGATE_SUPPRESSIONS "), __scope, false) } getOrElse {Nil},
        __obj.MAIL_TRACK_INTERVAL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAIL_TRACK_INTERVAL"), __scope, false) } getOrElse {Nil},
        __obj.TOP_DOMAINS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("TOP_DOMAINS"), __scope, false) } getOrElse {Nil},
        __obj.EXCLUDE_IM_FROM_METRICS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXCLUDE_IM_FROM_METRICS"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetReportIdByDateRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetReportIdByDateRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetReportIdByDateRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetReportIdByDateRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ^^
      { case p1 ~ p2 ~ p3 =>
      silverpop.GetReportIdByDateRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.GetReportIdByDateRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MAILING_ID, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false))

  }

  trait DefaultSilverpopGetSentMailingsForUserRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetSentMailingsForUserRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetSentMailingsForUserRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetSentMailingsForUserRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIONALUSER")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_SCRAPE_TEMPLATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_TAGS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXCLUDE_ZERO_SENT")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      silverpop.GetSentMailingsForUserRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetSentMailingsForUserRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false),
        __obj.OPTIONALUSER map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIONALUSER"), __scope, false) } getOrElse {Nil},
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SCHEDULED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SCHEDULED"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil},
        __obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_SCRAPE_TEMPLATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_SCRAPE_TEMPLATE"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_TAGS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_TAGS"), __scope, false) } getOrElse {Nil},
        __obj.EXCLUDE_ZERO_SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXCLUDE_ZERO_SENT"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetSentMailingsForListRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetSentMailingsForListRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetSentMailingsForListRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetSentMailingsForListRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_CHILDREN")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_SCRAPE_TEMPLATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_TAGS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXCLUDE_ZERO_SENT")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      silverpop.GetSentMailingsForListRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetSentMailingsForListRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.LIST_ID, Some("SilverpopApi:EngageService.Reporting"), Some("LIST_ID"), __scope, false),
        __obj.INCLUDE_CHILDREN map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_CHILDREN"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false),
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SCHEDULED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SCHEDULED"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil},
        __obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_SCRAPE_TEMPLATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_SCRAPE_TEMPLATE"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_TAGS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_TAGS"), __scope, false) } getOrElse {Nil},
        __obj.EXCLUDE_ZERO_SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXCLUDE_ZERO_SENT"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopColumnsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ColumnsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ColumnsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "COLUMN")) ^^
      { case p1 =>
      silverpop.ColumnsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ColumnElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ColumnsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.COLUMN flatMap { scalaxb.toXML[silverpop.ColumnElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("COLUMN"), __scope, false) })
  }

  trait DefaultSilverpopColumnElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ColumnElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ColumnElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ColumnElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NAME")) ^^
      { case p1 =>
      silverpop.ColumnElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ColumnElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.NAME, Some("SilverpopApi:EngageService.Reporting"), Some("NAME"), __scope, false))
  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.RawRecipientDataExportRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("RawRecipientDataExportRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.RawRecipientDataExportRequestType] =
      phrase(((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPORT_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "LIST_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_QUERIES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ALL_NON_EXPORTED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EVENT_DATE_START")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EVENT_DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SEND_DATE_START"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.RawRecipientDataExportRequestTypeSequence1(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[silverpop.MultiMailingsElementType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SEND_DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXPORT_FORMAT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXPORT_FILE_NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "FILE_ENCODING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EMAIL")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MOVE_TO_FTP")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT_MAILINGS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.RawRecipientDataExportRequestTypeSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[silverpop.EventExportFormat](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FileEncoding](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_SCRAPE_TEMPLATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_TEST_MAILINGS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ALL_EVENT_TYPES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.RawRecipientDataExportRequestTypeSequence3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SUPPRESSED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPENS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CLICKS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTINS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTOUTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "FORWARDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ATTACHMENTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CONVERSIONS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CLICKSTREAMS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "HARD_BOUNCES"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.RawRecipientDataExportRequestTypeSequence4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SOFT_BOUNCES")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPLY_ABUSE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPLY_COA")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPLY_OTHER")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAIL_BLOCKS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_RESTRICTIONS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SMS_ERROR")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SMS_REJECT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SMS_OPTOUT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_SEEDS"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.RawRecipientDataExportRequestTypeSequence5(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_FORWARDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_INBOX_MONITORING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CODED_TYPE_FIELDS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXCLUDE_DELETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "COLUMNS"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => silverpop.RawRecipientDataExportRequestTypeSequence6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[silverpop.ColumnsElementType](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      silverpop.RawRecipientDataExportRequestType(p1,
        p2,
        p3,
        p4,
        p5,
        p6) })
    
    def writesChildNodes(__obj: silverpop.RawRecipientDataExportRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence1](__obj.rawrecipientdataexportrequesttypesequence1, None, Some("rawrecipientdataexportrequesttypesequence1"), __scope, false),
        scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence2](__obj.rawrecipientdataexportrequesttypesequence2, None, Some("rawrecipientdataexportrequesttypesequence2"), __scope, false),
        scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence3](__obj.rawrecipientdataexportrequesttypesequence3, None, Some("rawrecipientdataexportrequesttypesequence3"), __scope, false),
        scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence4](__obj.rawrecipientdataexportrequesttypesequence4, None, Some("rawrecipientdataexportrequesttypesequence4"), __scope, false),
        scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence5](__obj.rawrecipientdataexportrequesttypesequence5, None, Some("rawrecipientdataexportrequesttypesequence5"), __scope, false),
        scalaxb.toXML[silverpop.RawRecipientDataExportRequestTypeSequence6](__obj.rawrecipientdataexportrequesttypesequence6, None, Some("rawrecipientdataexportrequesttypesequence6"), __scope, false))

  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence5Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence5] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence5] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence5, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.SOFT_BOUNCES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SOFT_BOUNCES"), __scope, false) } getOrElse {Nil},
        __obj.REPLY_ABUSE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPLY_ABUSE"), __scope, false) } getOrElse {Nil},
        __obj.REPLY_COA map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPLY_COA"), __scope, false) } getOrElse {Nil},
        __obj.REPLY_OTHER map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPLY_OTHER"), __scope, false) } getOrElse {Nil},
        __obj.MAIL_BLOCKS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAIL_BLOCKS"), __scope, false) } getOrElse {Nil},
        __obj.MAILING_RESTRICTIONS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_RESTRICTIONS"), __scope, false) } getOrElse {Nil},
        __obj.SMS_ERROR map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SMS_ERROR"), __scope, false) } getOrElse {Nil},
        __obj.SMS_REJECT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SMS_REJECT"), __scope, false) } getOrElse {Nil},
        __obj.SMS_OPTOUT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SMS_OPTOUT"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_SEEDS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_SEEDS"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence1Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.REPORT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPORT_ID"), __scope, false) } getOrElse {Nil},
        __obj.MAILING flatMap { scalaxb.toXML[silverpop.MultiMailingsElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING"), __scope, false) },
        __obj.CAMPAIGN_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ID"), __scope, false) } getOrElse {Nil},
        __obj.LIST_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("LIST_ID"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_QUERIES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_QUERIES"), __scope, false) } getOrElse {Nil},
        __obj.ALL_NON_EXPORTED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ALL_NON_EXPORTED"), __scope, false) } getOrElse {Nil},
        __obj.EVENT_DATE_START map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EVENT_DATE_START"), __scope, false) } getOrElse {Nil},
        __obj.EVENT_DATE_END map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EVENT_DATE_END"), __scope, false) } getOrElse {Nil},
        __obj.SEND_DATE_START map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SEND_DATE_START"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence4Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence4] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence4] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.SUPPRESSED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SUPPRESSED"), __scope, false) } getOrElse {Nil},
        __obj.OPENS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPENS"), __scope, false) } getOrElse {Nil},
        __obj.CLICKS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CLICKS"), __scope, false) } getOrElse {Nil},
        __obj.OPTINS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTINS"), __scope, false) } getOrElse {Nil},
        __obj.OPTOUTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTOUTS"), __scope, false) } getOrElse {Nil},
        __obj.FORWARDS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("FORWARDS"), __scope, false) } getOrElse {Nil},
        __obj.ATTACHMENTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ATTACHMENTS"), __scope, false) } getOrElse {Nil},
        __obj.CONVERSIONS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CONVERSIONS"), __scope, false) } getOrElse {Nil},
        __obj.CLICKSTREAMS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CLICKSTREAMS"), __scope, false) } getOrElse {Nil},
        __obj.HARD_BOUNCES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("HARD_BOUNCES"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence6Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence6] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence6] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence6, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.INCLUDE_FORWARDS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_FORWARDS"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_INBOX_MONITORING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_INBOX_MONITORING"), __scope, false) } getOrElse {Nil},
        __obj.CODED_TYPE_FIELDS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CODED_TYPE_FIELDS"), __scope, false) } getOrElse {Nil},
        __obj.EXCLUDE_DELETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXCLUDE_DELETED"), __scope, false) } getOrElse {Nil},
        __obj.COLUMNS map { scalaxb.toXML[silverpop.ColumnsElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("COLUMNS"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence2Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.SEND_DATE_END map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SEND_DATE_END"), __scope, false) } getOrElse {Nil},
        __obj.EXPORT_FORMAT map { scalaxb.toXML[silverpop.EventExportFormat](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXPORT_FORMAT"), __scope, false) } getOrElse {Nil},
        __obj.EXPORT_FILE_NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXPORT_FILE_NAME"), __scope, false) } getOrElse {Nil},
        __obj.FILE_ENCODING map { scalaxb.toXML[silverpop.FileEncoding](_, Some("SilverpopApi:EngageService.Reporting"), Some("FILE_ENCODING"), __scope, false) } getOrElse {Nil},
        __obj.EMAIL map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EMAIL"), __scope, false) } getOrElse {Nil},
        __obj.MOVE_TO_FTP map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MOVE_TO_FTP"), __scope, false) } getOrElse {Nil},
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SENT_MAILINGS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT_MAILINGS"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopRawRecipientDataExportRequestTypeSequence3Format extends scalaxb.XMLFormat[silverpop.RawRecipientDataExportRequestTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.RawRecipientDataExportRequestTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: silverpop.RawRecipientDataExportRequestTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_SCRAPE_TEMPLATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_SCRAPE_TEMPLATE"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_TEST_MAILINGS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_TEST_MAILINGS"), __scope, false) } getOrElse {Nil},
        __obj.ALL_EVENT_TYPES map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ALL_EVENT_TYPES"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopGetSentMailingsForOrgRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetSentMailingsForOrgRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetSentMailingsForOrgRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetSentMailingsForOrgRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_SCRAPE_TEMPLATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INCLUDE_TAGS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "EXCLUDE_ZERO_SENT")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      silverpop.GetSentMailingsForOrgRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetSentMailingsForOrgRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false),
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SCHEDULED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SCHEDULED"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil},
        __obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_SCRAPE_TEMPLATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_SCRAPE_TEMPLATE"), __scope, false) } getOrElse {Nil},
        __obj.INCLUDE_TAGS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INCLUDE_TAGS"), __scope, false) } getOrElse {Nil},
        __obj.EXCLUDE_ZERO_SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("EXCLUDE_ZERO_SENT"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetAggregateTrackingForMailingRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetAggregateTrackingForMailingRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetAggregateTrackingForMailingRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetAggregateTrackingForMailingRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPORT_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TOP_DOMAIN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INBOX_MONITORING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PER_CLICK")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.GetAggregateTrackingForMailingRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetAggregateTrackingForMailingRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MAILING_ID, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false),
        scalaxb.toXML[Long](__obj.REPORT_ID, Some("SilverpopApi:EngageService.Reporting"), Some("REPORT_ID"), __scope, false),
        __obj.TOP_DOMAIN map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("TOP_DOMAIN"), __scope, false) } getOrElse {Nil},
        __obj.INBOX_MONITORING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INBOX_MONITORING"), __scope, false) } getOrElse {Nil},
        __obj.PER_CLICK map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PER_CLICK"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetAggregateTrackingForOrgRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetAggregateTrackingForOrgRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetAggregateTrackingForOrgRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetAggregateTrackingForOrgRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIONALUSER")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TOP_DOMAIN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INBOX_MONITORING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PER_CLICK")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      silverpop.GetAggregateTrackingForOrgRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetAggregateTrackingForOrgRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false),
        __obj.OPTIONALUSER map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIONALUSER"), __scope, false) } getOrElse {Nil},
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SCHEDULED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SCHEDULED"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil},
        __obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.TOP_DOMAIN map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("TOP_DOMAIN"), __scope, false) } getOrElse {Nil},
        __obj.INBOX_MONITORING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INBOX_MONITORING"), __scope, false) } getOrElse {Nil},
        __obj.PER_CLICK map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PER_CLICK"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetAggregateTrackingForUserRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetAggregateTrackingForUserRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetAggregateTrackingForUserRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetAggregateTrackingForUserRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_START")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "DATE_END")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIONALUSER")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PRIVATE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SHARED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SCHEDULED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENDING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "OPTIN_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PROFILE_CONFIRMATION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "AUTOMATED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_ACTIVE")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_COMPLETED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "CAMPAIGN_CANCELLED")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TOP_DOMAIN")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "INBOX_MONITORING")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PER_CLICK")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      silverpop.GetAggregateTrackingForUserRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.GetAggregateTrackingForUserRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DATE_START, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_START"), __scope, false),
        scalaxb.toXML[String](__obj.DATE_END, Some("SilverpopApi:EngageService.Reporting"), Some("DATE_END"), __scope, false),
        __obj.OPTIONALUSER map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIONALUSER"), __scope, false) } getOrElse {Nil},
        __obj.PRIVATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PRIVATE"), __scope, false) } getOrElse {Nil},
        __obj.SHARED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SHARED"), __scope, false) } getOrElse {Nil},
        __obj.SCHEDULED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SCHEDULED"), __scope, false) } getOrElse {Nil},
        __obj.SENT map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT"), __scope, false) } getOrElse {Nil},
        __obj.SENDING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENDING"), __scope, false) } getOrElse {Nil},
        __obj.OPTIN_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("OPTIN_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.PROFILE_CONFIRMATION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PROFILE_CONFIRMATION"), __scope, false) } getOrElse {Nil},
        __obj.AUTOMATED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("AUTOMATED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_ACTIVE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_ACTIVE"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_COMPLETED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_COMPLETED"), __scope, false) } getOrElse {Nil},
        __obj.CAMPAIGN_CANCELLED map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("CAMPAIGN_CANCELLED"), __scope, false) } getOrElse {Nil},
        __obj.TOP_DOMAIN map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("TOP_DOMAIN"), __scope, false) } getOrElse {Nil},
        __obj.INBOX_MONITORING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("INBOX_MONITORING"), __scope, false) } getOrElse {Nil},
        __obj.PER_CLICK map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("PER_CLICK"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopGetJobStatusRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.GetJobStatusRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("GetJobStatusRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.GetJobStatusRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_ID")) ^^
      { case p1 =>
      silverpop.GetJobStatusRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.GetJobStatusRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.JOB_ID, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_ID"), __scope, false))
  }

  trait DefaultSilverpopDeleteJobRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.DeleteJobRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("DeleteJobRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.DeleteJobRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_ID")) ^^
      { case p1 =>
      silverpop.DeleteJobRequestType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.DeleteJobRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.JOB_ID, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_ID"), __scope, false))
  }

  trait DefaultSilverpopTopDomainElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TopDomainElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("TopDomainElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TopDomainElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MailingId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ReportId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Domain")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Sent")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Bounce")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Open")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Click")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Unsubscribe")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Conversion")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Conversion_Amount")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Reply_abuse")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Reply_mail_block")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Reply_mail_restriction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      silverpop.TopDomainElementType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p13, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.TopDomainElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.Reporting"), Some("MailingId"), __scope, false),
        scalaxb.toXML[Long](__obj.ReportId, Some("SilverpopApi:EngageService.Reporting"), Some("ReportId"), __scope, false),
        scalaxb.toXML[String](__obj.Domain, Some("SilverpopApi:EngageService.Reporting"), Some("Domain"), __scope, false),
        scalaxb.toXML[Int](__obj.Sent, Some("SilverpopApi:EngageService.Reporting"), Some("Sent"), __scope, false),
        scalaxb.toXML[Int](__obj.Bounce, Some("SilverpopApi:EngageService.Reporting"), Some("Bounce"), __scope, false),
        scalaxb.toXML[Int](__obj.Open, Some("SilverpopApi:EngageService.Reporting"), Some("Open"), __scope, false),
        scalaxb.toXML[Int](__obj.Click, Some("SilverpopApi:EngageService.Reporting"), Some("Click"), __scope, false),
        scalaxb.toXML[Int](__obj.Unsubscribe, Some("SilverpopApi:EngageService.Reporting"), Some("Unsubscribe"), __scope, false),
        scalaxb.toXML[Int](__obj.Conversion, Some("SilverpopApi:EngageService.Reporting"), Some("Conversion"), __scope, false),
        scalaxb.toXML[Int](__obj.Conversion_Amount, Some("SilverpopApi:EngageService.Reporting"), Some("Conversion_Amount"), __scope, false),
        scalaxb.toXML[Int](__obj.Reply_abuse, Some("SilverpopApi:EngageService.Reporting"), Some("Reply_abuse"), __scope, false),
        scalaxb.toXML[Int](__obj.Reply_mail_block, Some("SilverpopApi:EngageService.Reporting"), Some("Reply_mail_block"), __scope, false),
        scalaxb.toXML[Int](__obj.Reply_mail_restriction, Some("SilverpopApi:EngageService.Reporting"), Some("Reply_mail_restriction"), __scope, false))

  }

  trait DefaultSilverpopInboxMonitoringElementTypeFormat extends scalaxb.ElemNameParser[silverpop.InboxMonitoringElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("InboxMonitoringElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.InboxMonitoringElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MailingId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ReportId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Domain")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Sent")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Inbox")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Bulk")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NotReceived")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      silverpop.InboxMonitoringElementType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.InboxMonitoringElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.Reporting"), Some("MailingId"), __scope, false),
        scalaxb.toXML[Long](__obj.ReportId, Some("SilverpopApi:EngageService.Reporting"), Some("ReportId"), __scope, false),
        scalaxb.toXML[String](__obj.Domain, Some("SilverpopApi:EngageService.Reporting"), Some("Domain"), __scope, false),
        scalaxb.toXML[Int](__obj.Sent, Some("SilverpopApi:EngageService.Reporting"), Some("Sent"), __scope, false),
        scalaxb.toXML[Int](__obj.Inbox, Some("SilverpopApi:EngageService.Reporting"), Some("Inbox"), __scope, false),
        scalaxb.toXML[Int](__obj.Bulk, Some("SilverpopApi:EngageService.Reporting"), Some("Bulk"), __scope, false),
        scalaxb.toXML[Int](__obj.NotReceived, Some("SilverpopApi:EngageService.Reporting"), Some("NotReceived"), __scope, false))

  }

  trait DefaultSilverpopClicksElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ClicksElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ClicksElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ClicksElementType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MailingId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ReportId")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "LinkName")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "LinkURL")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TotalHTML")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TotalAOL")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TotalWEB")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TotalTEXT")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      silverpop.ClicksElementType(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.ClicksElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.MailingId, Some("SilverpopApi:EngageService.Reporting"), Some("MailingId"), __scope, false),
        scalaxb.toXML[Long](__obj.ReportId, Some("SilverpopApi:EngageService.Reporting"), Some("ReportId"), __scope, false),
        scalaxb.toXML[String](__obj.LinkName, Some("SilverpopApi:EngageService.Reporting"), Some("LinkName"), __scope, false),
        scalaxb.toXML[String](__obj.LinkURL, Some("SilverpopApi:EngageService.Reporting"), Some("LinkURL"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalHTML, Some("SilverpopApi:EngageService.Reporting"), Some("TotalHTML"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalAOL, Some("SilverpopApi:EngageService.Reporting"), Some("TotalAOL"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalWEB, Some("SilverpopApi:EngageService.Reporting"), Some("TotalWEB"), __scope, false),
        scalaxb.toXML[Int](__obj.TotalTEXT, Some("SilverpopApi:EngageService.Reporting"), Some("TotalTEXT"), __scope, false))

  }

  trait DefaultSilverpopMailingElementTypeFormat extends scalaxb.ElemNameParser[silverpop.MailingElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("MailingElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MailingElementType] =
      phrase(((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MailingId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ReportId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ScheduledTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MailingName")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ListName")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ListId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ParentListId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "UserName")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SentTS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SentDateTime"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence1(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumSent")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Subject")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Visibility")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "QueryId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "QueryName")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ContactListId")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "ContactListName")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Tags")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumSeeds")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumSuppressed"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence2(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.PrivateShared](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[silverpop.TagsElementType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumInboxMonitored")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumBounceHard")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumBounceSoft")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueOpen")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossOpen")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueClick")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossClick")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueAttach")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossAttach")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueClickStreams"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence3(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossClickStreams")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueMedia")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossMedia")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossAbuse")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossChangeAddress")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossMailBlock")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossMailRestriction")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossOther")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumConversions")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumConversionAmount"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence4(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumBounceHardFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumBounceSoftFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumConversionAmountFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumAttachOpenFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumClickFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueForwardFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossForwardFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueConversionsFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossConversionsFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueClickstreamFwd"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence5(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossClickstreamFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueClickFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossClickFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueAttachOpenFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossAttachOpenFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueMediaFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossMediaFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumUniqueOpenFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumGrossOpenFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumAbuseFwd"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => silverpop.MailingElementTypeSequence6(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumChangeAddressFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumMailRestrictionFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumMailBlockFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumOtherFwd")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NumSuppressedFwd"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => silverpop.MailingElementTypeSequence7(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      silverpop.MailingElementType(p1,
        p2,
        p3,
        p4,
        p5,
        p6,
        p7) })
    
    def writesChildNodes(__obj: silverpop.MailingElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[silverpop.MailingElementTypeSequence1](__obj.mailingelementtypesequence1, None, Some("mailingelementtypesequence1"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence2](__obj.mailingelementtypesequence2, None, Some("mailingelementtypesequence2"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence3](__obj.mailingelementtypesequence3, None, Some("mailingelementtypesequence3"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence4](__obj.mailingelementtypesequence4, None, Some("mailingelementtypesequence4"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence5](__obj.mailingelementtypesequence5, None, Some("mailingelementtypesequence5"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence6](__obj.mailingelementtypesequence6, None, Some("mailingelementtypesequence6"), __scope, false),
        scalaxb.toXML[silverpop.MailingElementTypeSequence7](__obj.mailingelementtypesequence7, None, Some("mailingelementtypesequence7"), __scope, false))

  }

  trait DefaultSilverpopMailingElementTypeSequence6Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence6] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence6] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence6, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumGrossClickstreamFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossClickstreamFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueClickFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueClickFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossClickFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossClickFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueAttachOpenFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueAttachOpenFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossAttachOpenFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossAttachOpenFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueMediaFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueMediaFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossMediaFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossMediaFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueOpenFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueOpenFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossOpenFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossOpenFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumAbuseFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumAbuseFwd"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence2Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumSent map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumSent"), __scope, false) } getOrElse {Nil},
        __obj.Subject map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("Subject"), __scope, false) } getOrElse {Nil},
        __obj.Visibility map { scalaxb.toXML[silverpop.PrivateShared](_, Some("SilverpopApi:EngageService.Reporting"), Some("Visibility"), __scope, false) } getOrElse {Nil},
        __obj.QueryId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("QueryId"), __scope, false) } getOrElse {Nil},
        __obj.QueryName map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("QueryName"), __scope, false) } getOrElse {Nil},
        __obj.ContactListId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("ContactListId"), __scope, false) } getOrElse {Nil},
        __obj.ContactListName map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ContactListName"), __scope, false) } getOrElse {Nil},
        __obj.Tags map { scalaxb.toXML[silverpop.TagsElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("Tags"), __scope, false) } getOrElse {Nil},
        __obj.NumSeeds map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumSeeds"), __scope, false) } getOrElse {Nil},
        __obj.NumSuppressed map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumSuppressed"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence3Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumInboxMonitored map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumInboxMonitored"), __scope, false) } getOrElse {Nil},
        __obj.NumBounceHard map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumBounceHard"), __scope, false) } getOrElse {Nil},
        __obj.NumBounceSoft map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumBounceSoft"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueOpen map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueOpen"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossOpen map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossOpen"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueClick map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueClick"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossClick map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossClick"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueAttach map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueAttach"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossAttach map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossAttach"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueClickStreams map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueClickStreams"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence7Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence7] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence7] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence7, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumChangeAddressFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumChangeAddressFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumMailRestrictionFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumMailRestrictionFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumMailBlockFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumMailBlockFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumOtherFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumOtherFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumSuppressedFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumSuppressedFwd"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence5Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence5] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence5] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence5, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumBounceHardFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumBounceHardFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumBounceSoftFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumBounceSoftFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumConversionAmountFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumConversionAmountFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumAttachOpenFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumAttachOpenFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumClickFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumClickFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueForwardFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueForwardFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossForwardFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossForwardFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueConversionsFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueConversionsFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossConversionsFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossConversionsFwd"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueClickstreamFwd map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueClickstreamFwd"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence1Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.MailingId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("MailingId"), __scope, false) } getOrElse {Nil},
        __obj.ReportId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("ReportId"), __scope, false) } getOrElse {Nil},
        __obj.ScheduledTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ScheduledTS"), __scope, false) } getOrElse {Nil},
        __obj.MailingName map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("MailingName"), __scope, false) } getOrElse {Nil},
        __obj.ListName map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("ListName"), __scope, false) } getOrElse {Nil},
        __obj.ListId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("ListId"), __scope, false) } getOrElse {Nil},
        __obj.ParentListId map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("ParentListId"), __scope, false) } getOrElse {Nil},
        __obj.UserName map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("UserName"), __scope, false) } getOrElse {Nil},
        __obj.SentTS map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SentTS"), __scope, false) } getOrElse {Nil},
        __obj.SentDateTime map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SentDateTime"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopMailingElementTypeSequence4Format extends scalaxb.XMLFormat[silverpop.MailingElementTypeSequence4] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.MailingElementTypeSequence4] = Left("don't call me.")
    
    def writes(__obj: silverpop.MailingElementTypeSequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.NumGrossClickStreams map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossClickStreams"), __scope, false) } getOrElse {Nil},
        __obj.NumUniqueMedia map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumUniqueMedia"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossMedia map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossMedia"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossAbuse map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossAbuse"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossChangeAddress map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossChangeAddress"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossMailBlock map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossMailBlock"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossMailRestriction map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossMailRestriction"), __scope, false) } getOrElse {Nil},
        __obj.NumGrossOther map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumGrossOther"), __scope, false) } getOrElse {Nil},
        __obj.NumConversions map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumConversions"), __scope, false) } getOrElse {Nil},
        __obj.NumConversionAmount map { scalaxb.toXML[Int](_, Some("SilverpopApi:EngageService.Reporting"), Some("NumConversionAmount"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopTagsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TagsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("TagsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TagsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Tag")) ^^
      { case p1 =>
      silverpop.TagsElementType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.TagsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tag flatMap { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("Tag"), __scope, false) })
  }

  trait DefaultSilverpopTrackingMetricMailingElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TrackingMetricMailingElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("TrackingMetricMailingElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TrackingMetricMailingElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "FILE_PATH")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SENT_DATE")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      silverpop.TrackingMetricMailingElementType(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.TrackingMetricMailingElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.JOB_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_ID"), __scope, false) } getOrElse {Nil},
        __obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.FILE_PATH map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("FILE_PATH"), __scope, false) } getOrElse {Nil},
        __obj.SENT_DATE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("SENT_DATE"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopMultiMailingsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.MultiMailingsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("MultiMailingsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.MultiMailingsElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "REPORT_ID")) ^^
      { case p1 ~ p2 =>
      silverpop.MultiMailingsElementType(p1.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.MultiMailingsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.MAILING_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING_ID"), __scope, false) } getOrElse {Nil},
        __obj.REPORT_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("REPORT_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopParametersElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ParametersElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ParametersElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ParametersElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PARAMETER")) ^^
      { case p1 =>
      silverpop.ParametersElementType(p1.toSeq map { scalaxb.fromXML[silverpop.ParameterElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.ParametersElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PARAMETER flatMap { scalaxb.toXML[silverpop.ParameterElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("PARAMETER"), __scope, false) })
  }

  trait DefaultSilverpopParameterElementTypeFormat extends scalaxb.ElemNameParser[silverpop.ParameterElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ParameterElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ParameterElementType] =
      phrase(opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "NAME")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "VALUE")) ^^
      { case p1 ~ p2 =>
      silverpop.ParameterElementType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ParameterElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.NAME map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("NAME"), __scope, false) } getOrElse {Nil},
        __obj.VALUE map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("VALUE"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopReportingResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.ReportingResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("ReportingResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.ReportingResponseType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Fault")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "MAILING")) ~ 
      safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Mailing")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_STATUS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "JOB_DESCRIPTION")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "PARAMETERS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TopDomains")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "InboxMonitored")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "Clicks")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      silverpop.ReportingResponseType(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[silverpop.FaultTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[silverpop.TrackingMetricMailingElementType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[silverpop.MailingElementType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[silverpop.JobStatus](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[silverpop.ParametersElementType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[silverpop.TopDomainsElementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[silverpop.InboxMonitoredElementType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[silverpop.ClicksElementType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.ReportingResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.SUCCESS, Some("SilverpopApi:EngageService.Reporting"), Some("SUCCESS"), __scope, false),
        __obj.Fault map { scalaxb.toXML[silverpop.FaultTypeType](_, Some("SilverpopApi:EngageService.Reporting"), Some("Fault"), __scope, false) } getOrElse {Nil},
        __obj.MAILING map { scalaxb.toXML[silverpop.TrackingMetricMailingElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("MAILING"), __scope, false) } getOrElse {Nil},
        __obj.Mailing flatMap { scalaxb.toXML[silverpop.MailingElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("Mailing"), __scope, false) },
        __obj.JOB_ID map { scalaxb.toXML[Long](_, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_ID"), __scope, false) } getOrElse {Nil},
        __obj.JOB_STATUS map { scalaxb.toXML[silverpop.JobStatus](_, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_STATUS"), __scope, false) } getOrElse {Nil},
        __obj.JOB_DESCRIPTION map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.Reporting"), Some("JOB_DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.PARAMETERS map { scalaxb.toXML[silverpop.ParametersElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("PARAMETERS"), __scope, false) } getOrElse {Nil},
        __obj.TopDomains map { scalaxb.toXML[silverpop.TopDomainsElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("TopDomains"), __scope, false) } getOrElse {Nil},
        __obj.InboxMonitored map { scalaxb.toXML[silverpop.InboxMonitoredElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("InboxMonitored"), __scope, false) } getOrElse {Nil},
        __obj.Clicks map { scalaxb.toXML[silverpop.ClicksElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("Clicks"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSilverpopTopDomainsElementTypeFormat extends scalaxb.ElemNameParser[silverpop.TopDomainsElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("TopDomainsElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.TopDomainsElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "TopDomain")) ^^
      { case p1 =>
      silverpop.TopDomainsElementType(p1.toSeq map { scalaxb.fromXML[silverpop.TopDomainElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.TopDomainsElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TopDomain flatMap { scalaxb.toXML[silverpop.TopDomainElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("TopDomain"), __scope, false) })
  }

  trait DefaultSilverpopInboxMonitoredElementTypeFormat extends scalaxb.ElemNameParser[silverpop.InboxMonitoredElementType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.Reporting")
    
    override def typeName: Option[String] = Some("InboxMonitoredElementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.InboxMonitoredElementType] =
      phrase(safeRep(scalaxb.ElemName(Some("SilverpopApi:EngageService.Reporting"), "InboxMonitoring")) ^^
      { case p1 =>
      silverpop.InboxMonitoredElementType(p1.toSeq map { scalaxb.fromXML[silverpop.InboxMonitoringElementType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: silverpop.InboxMonitoredElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.InboxMonitoring flatMap { scalaxb.toXML[silverpop.InboxMonitoringElementType](_, Some("SilverpopApi:EngageService.Reporting"), Some("InboxMonitoring"), __scope, false) })
  }

  trait DefaultSilverpopSessionheadertypeFormat extends scalaxb.ElemNameParser[silverpop.Sessionheadertype] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionHeader")
    
    override def typeName: Option[String] = Some("sessionheadertype")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.Sessionheadertype] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionHeader"), "sessionid")) ^^
      { case p1 =>
      silverpop.Sessionheadertype(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap((node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: silverpop.Sessionheadertype, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: silverpop.Sessionheadertype, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessionid, Some("SilverpopApi:EngageService.SessionHeader"), Some("sessionid"), __scope, false))
  }

  trait DefaultSilverpopFaultErrorTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultErrorType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    
    override def typeName: Option[String] = Some("FaultErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultErrorType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "errorid")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "module")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "class")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "method"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultErrorTypeSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultErrorType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultErrorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulterrortypesequence1 map { scalaxb.toXML[silverpop.FaultErrorTypeSequence1](_, None, Some("faulterrortypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultErrorTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultErrorTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultErrorTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultErrorTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.errorid map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("errorid"), __scope, false) } getOrElse {Nil},
        __obj.module map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("module"), __scope, false) } getOrElse {Nil},
        __obj.classValue map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("class"), __scope, false) } getOrElse {Nil},
        __obj.method map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("method"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopFaultDetailTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultDetailType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    
    override def typeName: Option[String] = Some("FaultDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultDetailType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "error"))) ^^ 
        { case p1 => silverpop.FaultDetailTypeSequence1(p1.headOption map { scalaxb.fromXML[silverpop.FaultErrorType](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultDetailType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faultdetailtypesequence1 map { scalaxb.toXML[silverpop.FaultDetailTypeSequence1](_, None, Some("faultdetailtypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultDetailTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultDetailTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultDetailTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultDetailTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.error map { scalaxb.toXML[silverpop.FaultErrorType](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("error"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultSilverpopFaultTypeFormat extends scalaxb.ElemNameParser[silverpop.FaultType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    
    override def typeName: Option[String] = Some("FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.FaultType] =
      phrase(opt((opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "Request")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "FaultCode")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "FaultString")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "detail"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => silverpop.FaultTypeSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[silverpop.FaultDetailType](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      silverpop.FaultType(p1) })
    
    def writesChildNodes(__obj: silverpop.FaultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.faulttypesequence1 map { scalaxb.toXML[silverpop.FaultTypeSequence1](_, None, Some("faulttypesequence1"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSilverpopFaultTypeSequence1Format extends scalaxb.XMLFormat[silverpop.FaultTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.FaultTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: silverpop.FaultTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Request map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("Request"), __scope, false) } getOrElse {Nil},
        __obj.FaultCode map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("FaultCode"), __scope, false) } getOrElse {Nil},
        __obj.FaultString map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("FaultString"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[silverpop.FaultDetailType](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("detail"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultSilverpopLogoutRequestTypeFormat extends scalaxb.XMLFormat[silverpop.LogoutRequestType] with scalaxb.CanWriteChildNodes[silverpop.LogoutRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, silverpop.LogoutRequestType] = seq match {
      case node: scala.xml.Node => Right(silverpop.LogoutRequestType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: silverpop.LogoutRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  trait DefaultSilverpopLoginRequestTypeFormat extends scalaxb.ElemNameParser[silverpop.LoginRequestType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    
    override def typeName: Option[String] = Some("LoginRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.LoginRequestType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "USERNAME")) ~ 
      (scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "PASSWORD")) ^^
      { case p1 ~ p2 =>
      silverpop.LoginRequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: silverpop.LoginRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.USERNAME, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("USERNAME"), __scope, false),
        scalaxb.toXML[String](__obj.PASSWORD, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("PASSWORD"), __scope, false))

  }

  trait DefaultSilverpopSessionMgmtResponseTypeFormat extends scalaxb.ElemNameParser[silverpop.SessionMgmtResponseType] {
    val targetNamespace: Option[String] = Some("SilverpopApi:EngageService.SessionMgmt.Login")
    
    override def typeName: Option[String] = Some("SessionMgmtResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[silverpop.SessionMgmtResponseType] =
      phrase((scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "SUCCESS")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "Fault")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "SESSIONID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "ORGANIZATION_ID")) ~ 
      opt(scalaxb.ElemName(Some("SilverpopApi:EngageService.SessionMgmt.Login"), "SESSION_ENCODING")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      silverpop.SessionMgmtResponseType(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[silverpop.FaultType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: silverpop.SessionMgmtResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.SUCCESS, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("SUCCESS"), __scope, false),
        __obj.Fault map { scalaxb.toXML[silverpop.FaultType](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("Fault"), __scope, false) } getOrElse {Nil},
        __obj.SESSIONID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("SESSIONID"), __scope, false) } getOrElse {Nil},
        __obj.ORGANIZATION_ID map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("ORGANIZATION_ID"), __scope, false) } getOrElse {Nil},
        __obj.SESSION_ENCODING map { scalaxb.toXML[String](_, Some("SilverpopApi:EngageService.SessionMgmt.Login"), Some("SESSION_ENCODING"), __scope, false) } getOrElse {Nil})

  }


}

