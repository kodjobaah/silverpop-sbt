// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package silverpop
trait FileEncodingType

object FileEncodingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FileEncodingType = value match {
    case "UTF-8" => UTFu458Value
    case "ISO-8859-1" => ISOu458859u451Value

  }
}

case object UTFu458Value extends FileEncodingType { override def toString = "UTF-8" }
case object ISOu458859u451Value extends FileEncodingType { override def toString = "ISO-8859-1" }

trait ListTypeId

object ListTypeId {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ListTypeId = value match {
    case "0" => Number0Value2
    case "1" => Number1Value2
    case "2" => Number2Value
    case "5" => Number5
    case "6" => Number6
    case "13" => Number13
    case "15" => Number15
    case "18" => Number18

  }
}

case object Number0Value2 extends ListTypeId { override def toString = "0" }
case object Number1Value2 extends ListTypeId { override def toString = "1" }
case object Number2Value extends ListTypeId { override def toString = "2" }
case object Number5 extends ListTypeId { override def toString = "5" }
case object Number6 extends ListTypeId { override def toString = "6" }
case object Number13 extends ListTypeId { override def toString = "13" }
case object Number15 extends ListTypeId { override def toString = "15" }
case object Number18 extends ListTypeId { override def toString = "18" }

trait ListColumnType

object ListColumnType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ListColumnType = value match {
    case "0" => Number0Value3
    case "1" => Number1Value3
    case "2" => Number2Value2
    case "3" => Number3
    case "4" => Number4
    case "5" => Number5Value
    case "6" => Number6Value
    case "8" => Number8
    case "9" => Number9
    case "17" => Number17
    case "20" => Number20

  }
}

case object Number0Value3 extends ListColumnType { override def toString = "0" }
case object Number1Value3 extends ListColumnType { override def toString = "1" }
case object Number2Value2 extends ListColumnType { override def toString = "2" }
case object Number3 extends ListColumnType { override def toString = "3" }
case object Number4 extends ListColumnType { override def toString = "4" }
case object Number5Value extends ListColumnType { override def toString = "5" }
case object Number6Value extends ListColumnType { override def toString = "6" }
case object Number8 extends ListColumnType { override def toString = "8" }
case object Number9 extends ListColumnType { override def toString = "9" }
case object Number17 extends ListColumnType { override def toString = "17" }
case object Number20 extends ListColumnType { override def toString = "20" }

trait TableColumnType

object TableColumnType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TableColumnType = value match {
    case "TEXT" => TEXT
    case "YESNO" => YESNO
    case "NUMERIC" => NUMERIC
    case "DATE" => DATE
    case "TIME" => TIME
    case "COUNTRY" => COUNTRY
    case "SELECTION" => SELECTION
    case "EMAIL" => EMAIL
    case "DATE_TIME" => DATE_TIME
    case "SYNC_ID" => SYNC_ID

  }
}

case object TEXT extends TableColumnType { override def toString = "TEXT" }
case object YESNO extends TableColumnType { override def toString = "YESNO" }
case object NUMERIC extends TableColumnType { override def toString = "NUMERIC" }
case object DATE extends TableColumnType { override def toString = "DATE" }
case object TIME extends TableColumnType { override def toString = "TIME" }
case object COUNTRY extends TableColumnType { override def toString = "COUNTRY" }
case object SELECTION extends TableColumnType { override def toString = "SELECTION" }
case object EMAIL extends TableColumnType { override def toString = "EMAIL" }
case object DATE_TIME extends TableColumnType { override def toString = "DATE_TIME" }
case object SYNC_ID extends TableColumnType { override def toString = "SYNC_ID" }

trait VisibilityType

object VisibilityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): VisibilityType = value match {
    case "0" => Number0Value4
    case "1" => Number1Value4

  }
}

case object Number0Value4 extends VisibilityType { override def toString = "0" }
case object Number1Value4 extends VisibilityType { override def toString = "1" }

trait ExportType

object ExportType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ExportType = value match {
    case "ALL" => ALL
    case "OPT_IN" => OPT_IN
    case "OPT_OUT" => OPT_OUT
    case "UNDELIVERABLE" => UNDELIVERABLE

  }
}

case object ALL extends ExportType { override def toString = "ALL" }
case object OPT_IN extends ExportType { override def toString = "OPT_IN" }
case object OPT_OUT extends ExportType { override def toString = "OPT_OUT" }
case object UNDELIVERABLE extends ExportType { override def toString = "UNDELIVERABLE" }

trait ListTableExportFormat

object ListTableExportFormat {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ListTableExportFormat = value match {
    case "CSV" => CSVValue
    case "TAB" => TAB
    case "PIPE" => PIPEValue

  }
}

case object CSVValue extends ListTableExportFormat { override def toString = "CSV" }
case object TAB extends ListTableExportFormat { override def toString = "TAB" }
case object PIPEValue extends ListTableExportFormat { override def toString = "PIPE" }

trait OptionOperator

object OptionOperator {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OptionOperator = value match {
    case "100" => Number100
    case "101" => Number101
    case "102" => Number102
    case "103" => Number103

  }
}

case object Number100 extends OptionOperator { override def toString = "100" }
case object Number101 extends OptionOperator { override def toString = "101" }
case object Number102 extends OptionOperator { override def toString = "102" }
case object Number103 extends OptionOperator { override def toString = "103" }

trait TypeOperator

object TypeOperator {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TypeOperator = value match {
    case "110" => Number110
    case "111" => Number111

  }
}

case object Number110 extends TypeOperator { override def toString = "110" }
case object Number111 extends TypeOperator { override def toString = "111" }

trait WhereOperator

object WhereOperator {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): WhereOperator = value match {
    case "120" => Number120
    case "121" => Number121
    case "122" => Number122

  }
}

case object Number120 extends WhereOperator { override def toString = "120" }
case object Number121 extends WhereOperator { override def toString = "121" }
case object Number122 extends WhereOperator { override def toString = "122" }

trait CriteriaOperator

object CriteriaOperator {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CriteriaOperator = value match {
    case "!=" => U33u61Value
    case "<=" => U60u61Value
    case ">=" => U62u61Value
    case "<" => U60Value
    case ">" => U62Value
    case "=" => U61Value
    case "BETWEEN" => BETWEENValue

  }
}

case object U33u61Value extends CriteriaOperator { override def toString = "!=" }
case object U60u61Value extends CriteriaOperator { override def toString = "<=" }
case object U62u61Value extends CriteriaOperator { override def toString = ">=" }
case object U60Value extends CriteriaOperator { override def toString = "<" }
case object U62Value extends CriteriaOperator { override def toString = ">" }
case object U61Value extends CriteriaOperator { override def toString = "=" }
case object BETWEENValue extends CriteriaOperator { override def toString = "BETWEEN" }

trait CriteriaType

object CriteriaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CriteriaType = value match {
    case "Locked" => Locked
    case "Editable" => Editable

  }
}

case object Locked extends CriteriaType { override def toString = "Locked" }
case object Editable extends CriteriaType { override def toString = "Editable" }

trait ExpressionTypeType

object ExpressionTypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ExpressionTypeType = value match {
    case "TE" => TEValue
    case "NE" => NEValue
    case "DE" => DEValue

  }
}

case object TEValue extends ExpressionTypeType { override def toString = "TE" }
case object NEValue extends ExpressionTypeType { override def toString = "NE" }
case object DEValue extends ExpressionTypeType { override def toString = "DE" }

trait OperatorsType

object OperatorsType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OperatorsType = value match {
    case "!=" => U33u61Value2
    case "<=" => U60u61Value2
    case ">=" => U62u61Value2
    case "<" => U60Value2
    case ">" => U62Value2
    case "=" => U61Value2
    case "IS NOT null" => ISNOTnullValue
    case "IS null" => ISnullValue
    case "LIKE" => LIKEValue
    case "NOT like" => NOTlikeValue
    case "IN" => INValue
    case "NOT in" => NOTinValue
    case "BETWEEN" => BETWEENValue2

  }
}

case object U33u61Value2 extends OperatorsType { override def toString = "!=" }
case object U60u61Value2 extends OperatorsType { override def toString = "<=" }
case object U62u61Value2 extends OperatorsType { override def toString = ">=" }
case object U60Value2 extends OperatorsType { override def toString = "<" }
case object U62Value2 extends OperatorsType { override def toString = ">" }
case object U61Value2 extends OperatorsType { override def toString = "=" }
case object ISNOTnullValue extends OperatorsType { override def toString = "IS NOT null" }
case object ISnullValue extends OperatorsType { override def toString = "IS null" }
case object LIKEValue extends OperatorsType { override def toString = "LIKE" }
case object NOTlikeValue extends OperatorsType { override def toString = "NOT like" }
case object INValue extends OperatorsType { override def toString = "IN" }
case object NOTinValue extends OperatorsType { override def toString = "NOT in" }
case object BETWEENValue2 extends OperatorsType { override def toString = "BETWEEN" }

trait AndOrType

object AndOrType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AndOrType = value match {
    case "AND" => ANDValue
    case "OR" => ORValue

  }
}

case object ANDValue extends AndOrType { override def toString = "AND" }
case object ORValue extends AndOrType { override def toString = "OR" }


case class FaultErrorTypeType3(faulterrortypetype3sequence1: Option[silverpop.FaultErrorTypeType3Sequence1] = None)

case class FaultErrorTypeType3Sequence1(errorid: Option[String] = None,
  module: Option[String] = None,
  classValue: Option[String] = None,
  method: Option[String] = None)


case class FaultDetailTypeType3(faultdetailtypetype3sequence1: Option[silverpop.FaultDetailTypeType3Sequence1] = None)

case class FaultDetailTypeType3Sequence1(error: Option[silverpop.FaultErrorTypeType3] = None)

case class FaultTypeType3(faulttypetype3sequence1: Option[silverpop.FaultTypeType3Sequence1] = None)

case class FaultTypeType3Sequence1(Request: Option[String] = None,
  FaultCode: Option[String] = None,
  FaultString: Option[String] = None,
  detail: Option[silverpop.FaultDetailTypeType3] = None)


case class ImportListRequestType(MAP_FILE: String,
  SOURCE_FILE: String,
  FILE_ENCODING: Option[silverpop.FileEncodingType] = None)


case class ListMgmtUserActionsResponseType(listmgmtuseractionsresponsetypesequence1: silverpop.ListMgmtUserActionsResponseTypeSequence1,
  listmgmtuseractionsresponsetypesequence2: silverpop.ListMgmtUserActionsResponseTypeSequence2,
  listmgmtuseractionsresponsetypesequence3: silverpop.ListMgmtUserActionsResponseTypeSequence3) {
  lazy val SUCCESS = listmgmtuseractionsresponsetypesequence1.SUCCESS
  lazy val Fault = listmgmtuseractionsresponsetypesequence1.Fault
  lazy val JOB_ID = listmgmtuseractionsresponsetypesequence1.JOB_ID
  lazy val FILE_PATH = listmgmtuseractionsresponsetypesequence1.FILE_PATH
  lazy val ID = listmgmtuseractionsresponsetypesequence1.ID
  lazy val NAME = listmgmtuseractionsresponsetypesequence1.NAME
  lazy val TYPE = listmgmtuseractionsresponsetypesequence1.TYPE
  lazy val SIZE = listmgmtuseractionsresponsetypesequence1.SIZE
  lazy val NUM_OPT_OUTS = listmgmtuseractionsresponsetypesequence1.NUM_OPT_OUTS
  lazy val NUM_UNDELIVERABLE = listmgmtuseractionsresponsetypesequence1.NUM_UNDELIVERABLE
  lazy val LAST_MODIFIED = listmgmtuseractionsresponsetypesequence2.LAST_MODIFIED
  lazy val LAST_CONFIGURED = listmgmtuseractionsresponsetypesequence2.LAST_CONFIGURED
  lazy val CREATED = listmgmtuseractionsresponsetypesequence2.CREATED
  lazy val VISIBILITY = listmgmtuseractionsresponsetypesequence2.VISIBILITY
  lazy val USER_ID = listmgmtuseractionsresponsetypesequence2.USER_ID
  lazy val ORGANIZATION_ID = listmgmtuseractionsresponsetypesequence2.ORGANIZATION_ID
  lazy val OPT_IN_FORM_DEFINED = listmgmtuseractionsresponsetypesequence2.OPT_IN_FORM_DEFINED
  lazy val OPT_OUT_FORM_DEFINED = listmgmtuseractionsresponsetypesequence2.OPT_OUT_FORM_DEFINED
  lazy val PROFILE_FORM_DEFINED = listmgmtuseractionsresponsetypesequence2.PROFILE_FORM_DEFINED
  lazy val OPT_IN_AUTOREPLY_DEFINED = listmgmtuseractionsresponsetypesequence2.OPT_IN_AUTOREPLY_DEFINED
  lazy val PROFILE_AUTOREPLY_DEFINED = listmgmtuseractionsresponsetypesequence3.PROFILE_AUTOREPLY_DEFINED
  lazy val SMS_KEYWORD = listmgmtuseractionsresponsetypesequence3.SMS_KEYWORD
  lazy val COLUMNS = listmgmtuseractionsresponsetypesequence3.COLUMNS
  lazy val SELECTION_VALUES = listmgmtuseractionsresponsetypesequence3.SELECTION_VALUES
  lazy val KEY_COLUMNS = listmgmtuseractionsresponsetypesequence3.KEY_COLUMNS
  lazy val Mailing = listmgmtuseractionsresponsetypesequence3.Mailing
  lazy val LIST = listmgmtuseractionsresponsetypesequence3.LIST
  lazy val TABLE_ID = listmgmtuseractionsresponsetypesequence3.TABLE_ID
  lazy val FAILURES = listmgmtuseractionsresponsetypesequence3.FAILURES
  lazy val CONTACT_LIST_ID = listmgmtuseractionsresponsetypesequence3.CONTACT_LIST_ID
}


case class ListMgmtUserActionsResponseTypeSequence3(PROFILE_AUTOREPLY_DEFINED: Option[Boolean] = None,
  SMS_KEYWORD: Option[String] = None,
  COLUMNS: Option[silverpop.ColumnsElementTypeType] = None,
  SELECTION_VALUES: Option[silverpop.SelectionValuesElementType] = None,
  KEY_COLUMNS: Option[silverpop.ColumnsElementTypeType] = None,
  Mailing: Seq[silverpop.MailingElementTypeType] = Nil,
  LIST: Seq[silverpop.ListElementType] = Nil,
  TABLE_ID: Option[Long] = None,
  FAILURES: Option[silverpop.FailuresElementType] = None,
  CONTACT_LIST_ID: Option[Long] = None)

case class ListMgmtUserActionsResponseTypeSequence2(LAST_MODIFIED: Option[String] = None,
  LAST_CONFIGURED: Option[String] = None,
  CREATED: Option[String] = None,
  VISIBILITY: Option[silverpop.VisibilityType] = None,
  USER_ID: Option[String] = None,
  ORGANIZATION_ID: Option[String] = None,
  OPT_IN_FORM_DEFINED: Option[Boolean] = None,
  OPT_OUT_FORM_DEFINED: Option[Boolean] = None,
  PROFILE_FORM_DEFINED: Option[Boolean] = None,
  OPT_IN_AUTOREPLY_DEFINED: Option[Boolean] = None)

case class ListMgmtUserActionsResponseTypeSequence1(SUCCESS: Option[Boolean] = None,
  Fault: Option[silverpop.FaultTypeType3] = None,
  JOB_ID: Option[Long] = None,
  FILE_PATH: Option[String] = None,
  ID: Option[Long] = None,
  NAME: Option[String] = None,
  TYPE: Option[silverpop.ListTypeId] = None,
  SIZE: Option[Int] = None,
  NUM_OPT_OUTS: Option[Int] = None,
  NUM_UNDELIVERABLE: Option[Int] = None)


case class ListElementType(ID: Long,
  NAME: String,
  TYPE: silverpop.ListTypeId,
  SIZE: Int,
  NUM_OPT_OUTS: Int,
  NUM_UNDELIVERABLE: Int,
  LAST_MODIFIED: String,
  VISIBILITY: silverpop.VisibilityType,
  PARENT_NAME: Option[String] = None,
  USER_ID: String,
  PARENT_FOLDER_ID: Option[Long] = None,
  IS_FOLDER: Boolean,
  FLAGGED_FOR_BACKUP: Boolean,
  SUPPRESSION_LIST_ID: Seq[Long] = Nil)


case class MailingElementTypeType(MailingName: String,
  MailingId: Long,
  SentTS: String,
  TotalOpens: Int,
  TotalClickstreams: Int,
  TotalClicks: Int,
  TotalConversions: Int,
  TotalAttachments: Int,
  TotalForwards: Int,
  TotalMediaPlays: Int,
  TotalBounces: Int,
  TotalOptOuts: Int)


case class RemoveRecipientRequestType(LIST_ID: Long,
  EMAIL: Option[String] = None,
  COLUMN: Seq[silverpop.ColumnNameValueElementType] = Nil)


case class ColumnNameValueElementType(NAME: String,
  VALUE: String)


case class ImportRecipientFieldDataRequestType(LIST_ID: Long,
  COLUMN: String,
  SOURCE_FILE: String,
  COMPLETION_EMAIL: String,
  ERROR_EMAIL: String,
  FILE_ENCODING: Option[silverpop.FileEncodingType] = None)


case class ExportListRequestType(LIST_ID: Long,
  EMAIL: Option[String] = None,
  EXPORT_TYPE: silverpop.ExportType,
  EXPORT_FORMAT: silverpop.ListTableExportFormat,
  FILE_ENCODING: Option[silverpop.FileEncodingType] = None,
  ADD_TO_STORED_FILES: Option[String] = None,
  DATE_START: Option[String] = None,
  DATE_END: Option[String] = None)


case class GetListMetaDataRequestType(LIST_ID: Long)


case class ColumnsElementTypeType(COLUMN: silverpop.ColumnElementTypeType*)


case class ColumnElementTypeType(NAME: Option[String] = None,
  DEFAULT_VALUE: Option[String] = None,
  TYPE: Option[silverpop.ListColumnType] = None,
  SELECTION_VALUES: Option[silverpop.SelectionValuesElementType] = None)


case class TableColumnsElementType(COLUMN: silverpop.TableColumnElementType*)


case class TableColumnElementType(NAME: String,
  TYPE: silverpop.TableColumnType,
  IS_REQUIRED: Option[Boolean] = None,
  KEY_COLUMN: Option[Boolean] = None,
  DEFAULT_VALUE: Option[String] = None,
  SELECTION_VALUES: Option[silverpop.SelectionValuesElementType] = None)


case class RowsElementType(ROW: silverpop.RowElementType*)


case class RowElementType(COLUMN: silverpop.RowColumnElementType*)


case class RowColumnElementType(value: String,
  name: String)


case class DeleteRowsElementType(ROW: silverpop.DeleteRowElementType*)


case class DeleteRowElementType(KEY_COLUMN: silverpop.ColumnNameElementType*)


case class ColumnNameElementType(value: String,
  name: String)


case class SelectionValuesElementType(VALUE: String*)


case class FailuresElementType(FAILURE: silverpop.FailureElementType*)


case class FailureElementType(COLUMN: Seq[silverpop.ColumnNameElementType] = Nil,
  KEY_COLUMN: Seq[silverpop.ColumnNameElementType] = Nil,
  failure_type: String,
  description: String)


case class GetListsRequestType(VISIBILITY: silverpop.VisibilityType,
  LIST_TYPE: silverpop.ListTypeId,
  FOLDER_ID: Option[Long] = None,
  INCLUDE_ALL_LISTS: Option[String] = None)


case class ListRecipientMailingsRequestType(LIST_ID: Long,
  RECIPIENT_ID: Long)


case class ImportTableRequestType(MAP_FILE: String,
  SOURCE_FILE: String)


case class JoinTableRequestType(TABLE_NAME: Option[String] = None,
  TABLE_ID: Option[Long] = None,
  TABLE_VISIBILITY: Option[silverpop.VisibilityType] = None,
  LIST_NAME: Option[String] = None,
  LIST_ID: Option[Long] = None,
  LIST_VISIBILITY: Option[silverpop.VisibilityType] = None,
  REMOVE: Option[String] = None,
  EMAIL: Option[String] = None,
  MAP_FIELD: Seq[silverpop.MapFieldElementType] = Nil)


case class MapFieldElementType(LIST_FIELD: Option[String] = None,
  TABLE_FIELD: Option[String] = None)


case class ExportTableRequestType(TABLE_NAME: Option[String] = None,
  TABLE_ID: Option[Long] = None,
  TABLE_VISIBILITY: Option[silverpop.VisibilityType] = None,
  EMAIL: Option[String] = None,
  EXPORT_FORMAT: silverpop.ListTableExportFormat,
  ADD_TO_STORED_FILES: Option[String] = None,
  DATE_START: Option[String] = None,
  DATE_END: Option[String] = None)


case class DeleteTableRequestType(TABLE_NAME: Option[String] = None,
  TABLE_ID: Option[Long] = None,
  TABLE_VISIBILITY: Option[silverpop.VisibilityType] = None,
  EMAIL: Option[String] = None)


case class CreateQueryRequestType(QUERY_NAME: String,
  PARENT_LIST_ID: Long,
  VISIBILITY: silverpop.VisibilityType,
  PARENT_FOLDER_ID: Option[Long] = None,
  ALLOW_FIELD_CHANGE: Boolean,
  SELECT_COLUMNS: Option[String] = None,
  CRITERIA: Option[silverpop.CriteriaElementTypeType] = None,
  BEHAVIOR: Option[silverpop.BehaviorElementType] = None)


case class CalculateQueryRequestType(QUERY_ID: Long,
  EMAIL: Option[String] = None)


case class BehaviorElementType(OPTION_OPERATOR: silverpop.OptionOperator,
  TYPE_OPERATOR: silverpop.TypeOperator,
  MAILING_ID: Option[Long] = None,
  REPORT_ID: Option[Long] = None,
  LINK_NAME: Option[String] = None,
  WHERE_OPERATOR: Option[silverpop.WhereOperator] = None,
  CRITERIA_OPERATOR: Option[silverpop.CriteriaOperator] = None,
  VALUES: Option[String] = None)


case class CriteriaElementTypeType(TYPE: silverpop.CriteriaType,
  EXPRESSION: Seq[silverpop.ExpressionElementTypeType] = Nil)


case class ExpressionElementTypeType(AND_OR: Option[silverpop.AndOrType] = None,
  TYPE: silverpop.ExpressionTypeType,
  COLUMN_NAME: String,
  OPERATORS: silverpop.OperatorsType,
  RIGHT_PARENS: Option[String] = None,
  VALUES: String,
  LEFT_PARENS: Option[String] = None)


case class PurgeTableRequestType(TABLE_NAME: Option[String] = None,
  TABLE_ID: Option[Long] = None,
  TABLE_VISIBILITY: Option[silverpop.VisibilityType] = None,
  DELETE_BEFORE: Option[String] = None,
  EMAIL: Option[String] = None)


case class AddListColumnRequestType(LIST_ID: Long,
  COLUMN_NAME: String,
  COLUMN_TYPE: silverpop.ListColumnType,
  DEFAULT: Option[String] = None,
  SELECTION_VALUES: Option[silverpop.SelectionValuesElementType] = None)


case class CreateTableRequestType(TABLE_NAME: String,
  COLUMNS: silverpop.TableColumnsElementType)


case class InsertUpdateRelationalTableRequestType(TABLE_ID: Long,
  ROWS: silverpop.RowsElementType)


case class DeleteRelationalTableDataRequestType(TABLE_ID: Long,
  ROWS: silverpop.DeleteRowsElementType)


case class CreateContactListRequestType(DATABASE_ID: Long,
  CONTACT_LIST_NAME: String,
  VISIBILITY: silverpop.VisibilityType)


case class AddContactToContactListRequestType(CONTACT_LIST_ID: Long,
  CONTACT_ID: Option[Long] = None,
  COLUMN: Seq[silverpop.ColumnNameValueElementType] = Nil)


case class AddContactToProgramRequestType(PROGRAM_ID: Long,
  CONTACT_ID: Long)

