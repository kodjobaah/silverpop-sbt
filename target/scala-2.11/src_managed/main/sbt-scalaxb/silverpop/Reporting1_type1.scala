// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package silverpop
trait FileEncoding

object FileEncoding {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FileEncoding = value match {
    case "UTF-8" => UTFu458
    case "ISO-8859-1" => ISOu458859u451

  }
}

case object UTFu458 extends FileEncoding { override def toString = "UTF-8" }
case object ISOu458859u451 extends FileEncoding { override def toString = "ISO-8859-1" }

trait EventExportFormat

object EventExportFormat {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EventExportFormat = value match {
    case "0" => Number0
    case "1" => Number1
    case "2" => Number2

  }
}

case object Number0 extends EventExportFormat { override def toString = "0" }
case object Number1 extends EventExportFormat { override def toString = "1" }
case object Number2 extends EventExportFormat { override def toString = "2" }

trait PrivateShared

object PrivateShared {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PrivateShared = value match {
    case "Private" => Private
    case "Shared" => Shared

  }
}

case object Private extends PrivateShared { override def toString = "Private" }
case object Shared extends PrivateShared { override def toString = "Shared" }

trait JobStatus

object JobStatus {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): JobStatus = value match {
    case "WAITING" => WAITING
    case "RUNNING" => RUNNING
    case "CANCELED" => CANCELED
    case "ERROR" => ERROR
    case "COMPLETE" => COMPLETE

  }
}

case object WAITING extends JobStatus { override def toString = "WAITING" }
case object RUNNING extends JobStatus { override def toString = "RUNNING" }
case object CANCELED extends JobStatus { override def toString = "CANCELED" }
case object ERROR extends JobStatus { override def toString = "ERROR" }
case object COMPLETE extends JobStatus { override def toString = "COMPLETE" }

trait MetricsExportFormat

object MetricsExportFormat {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): MetricsExportFormat = value match {
    case "CSV" => CSV
    case "TSV" => TSV
    case "PIPE" => PIPE

  }
}

case object CSV extends MetricsExportFormat { override def toString = "CSV" }
case object TSV extends MetricsExportFormat { override def toString = "TSV" }
case object PIPE extends MetricsExportFormat { override def toString = "PIPE" }


case class FaultErrorTypeType(faulterrortypetypesequence1: Option[silverpop.FaultErrorTypeTypeSequence1] = None)

case class FaultErrorTypeTypeSequence1(errorid: Option[String] = None,
  module: Option[String] = None,
  classValue: Option[String] = None,
  method: Option[String] = None)


case class FaultDetailTypeType(faultdetailtypetypesequence1: Option[silverpop.FaultDetailTypeTypeSequence1] = None)

case class FaultDetailTypeTypeSequence1(error: Option[silverpop.FaultErrorTypeType] = None)

case class FaultTypeType(faulttypetypesequence1: Option[silverpop.FaultTypeTypeSequence1] = None)

case class FaultTypeTypeSequence1(Request: Option[String] = None,
  FaultCode: Option[String] = None,
  FaultString: Option[String] = None,
  detail: Option[silverpop.FaultDetailTypeType] = None)


case class TrackingMetricExportRequestType(MAILING_ID: Option[Long] = None,
  REPORT_ID: Option[Long] = None,
  EXPORT_FORMAT: Option[silverpop.MetricsExportFormat] = None,
  LIST_ID: Option[Long] = None,
  EMAIL: Option[String] = None,
  SEND_DATE_START: Option[String] = None,
  SEND_DATE_END: Option[String] = None,
  MOVE_TO_FTP: Option[String] = None,
  ALL_AGGREGATE_METRICS: Option[String] = None,
  AGGREGATE_SUMMARY: Option[String] = None,
  ALL_METRICS_FORWARDS: Option[String] = None,
  AGGREGATE_CLICKS: Option[String] = None,
  AGGREGATE_CLICKSTREAMS: Option[String] = None,
  AGGREGATE_CONVERSIONS: Option[String] = None,
  AGGREGATE_ATTACHMENTS: Option[String] = None,
  AGGREGATE_MEDIA: Option[String] = None,
  AGGREGATE_SUPPRESSIONS: Option[String] = None,
  MAIL_TRACK_INTERVAL: Option[String] = None,
  TOP_DOMAINS: Option[String] = None,
  EXCLUDE_IM_FROM_METRICS: Option[String] = None)


case class GetReportIdByDateRequestType(MAILING_ID: Long,
  DATE_START: String,
  DATE_END: String)


case class GetSentMailingsForUserRequestType(DATE_START: String,
  DATE_END: String,
  OPTIONALUSER: Option[String] = None,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SCHEDULED: Option[String] = None,
  SENT: Option[String] = None,
  SENDING: Option[String] = None,
  OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  CAMPAIGN_SCRAPE_TEMPLATE: Option[String] = None,
  INCLUDE_TAGS: Option[String] = None,
  EXCLUDE_ZERO_SENT: Option[String] = None)


case class GetSentMailingsForListRequestType(LIST_ID: Long,
  INCLUDE_CHILDREN: Option[String] = None,
  DATE_START: String,
  DATE_END: String,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SCHEDULED: Option[String] = None,
  SENT: Option[String] = None,
  SENDING: Option[String] = None,
  OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  CAMPAIGN_SCRAPE_TEMPLATE: Option[String] = None,
  INCLUDE_TAGS: Option[String] = None,
  EXCLUDE_ZERO_SENT: Option[String] = None)


case class ColumnsElementType(COLUMN: silverpop.ColumnElementType*)


case class ColumnElementType(NAME: String)


case class RawRecipientDataExportRequestType(rawrecipientdataexportrequesttypesequence1: silverpop.RawRecipientDataExportRequestTypeSequence1,
  rawrecipientdataexportrequesttypesequence2: silverpop.RawRecipientDataExportRequestTypeSequence2,
  rawrecipientdataexportrequesttypesequence3: silverpop.RawRecipientDataExportRequestTypeSequence3,
  rawrecipientdataexportrequesttypesequence4: silverpop.RawRecipientDataExportRequestTypeSequence4,
  rawrecipientdataexportrequesttypesequence5: silverpop.RawRecipientDataExportRequestTypeSequence5,
  rawrecipientdataexportrequesttypesequence6: silverpop.RawRecipientDataExportRequestTypeSequence6) {
  lazy val MAILING_ID = rawrecipientdataexportrequesttypesequence1.MAILING_ID
  lazy val REPORT_ID = rawrecipientdataexportrequesttypesequence1.REPORT_ID
  lazy val MAILING = rawrecipientdataexportrequesttypesequence1.MAILING
  lazy val CAMPAIGN_ID = rawrecipientdataexportrequesttypesequence1.CAMPAIGN_ID
  lazy val LIST_ID = rawrecipientdataexportrequesttypesequence1.LIST_ID
  lazy val INCLUDE_QUERIES = rawrecipientdataexportrequesttypesequence1.INCLUDE_QUERIES
  lazy val ALL_NON_EXPORTED = rawrecipientdataexportrequesttypesequence1.ALL_NON_EXPORTED
  lazy val EVENT_DATE_START = rawrecipientdataexportrequesttypesequence1.EVENT_DATE_START
  lazy val EVENT_DATE_END = rawrecipientdataexportrequesttypesequence1.EVENT_DATE_END
  lazy val SEND_DATE_START = rawrecipientdataexportrequesttypesequence1.SEND_DATE_START
  lazy val SEND_DATE_END = rawrecipientdataexportrequesttypesequence2.SEND_DATE_END
  lazy val EXPORT_FORMAT = rawrecipientdataexportrequesttypesequence2.EXPORT_FORMAT
  lazy val EXPORT_FILE_NAME = rawrecipientdataexportrequesttypesequence2.EXPORT_FILE_NAME
  lazy val FILE_ENCODING = rawrecipientdataexportrequesttypesequence2.FILE_ENCODING
  lazy val EMAIL = rawrecipientdataexportrequesttypesequence2.EMAIL
  lazy val MOVE_TO_FTP = rawrecipientdataexportrequesttypesequence2.MOVE_TO_FTP
  lazy val PRIVATE = rawrecipientdataexportrequesttypesequence2.PRIVATE
  lazy val SHARED = rawrecipientdataexportrequesttypesequence2.SHARED
  lazy val SENT_MAILINGS = rawrecipientdataexportrequesttypesequence2.SENT_MAILINGS
  lazy val SENDING = rawrecipientdataexportrequesttypesequence2.SENDING
  lazy val OPTIN_CONFIRMATION = rawrecipientdataexportrequesttypesequence3.OPTIN_CONFIRMATION
  lazy val PROFILE_CONFIRMATION = rawrecipientdataexportrequesttypesequence3.PROFILE_CONFIRMATION
  lazy val AUTOMATED = rawrecipientdataexportrequesttypesequence3.AUTOMATED
  lazy val CAMPAIGN_ACTIVE = rawrecipientdataexportrequesttypesequence3.CAMPAIGN_ACTIVE
  lazy val CAMPAIGN_COMPLETED = rawrecipientdataexportrequesttypesequence3.CAMPAIGN_COMPLETED
  lazy val CAMPAIGN_CANCELLED = rawrecipientdataexportrequesttypesequence3.CAMPAIGN_CANCELLED
  lazy val CAMPAIGN_SCRAPE_TEMPLATE = rawrecipientdataexportrequesttypesequence3.CAMPAIGN_SCRAPE_TEMPLATE
  lazy val INCLUDE_TEST_MAILINGS = rawrecipientdataexportrequesttypesequence3.INCLUDE_TEST_MAILINGS
  lazy val ALL_EVENT_TYPES = rawrecipientdataexportrequesttypesequence3.ALL_EVENT_TYPES
  lazy val SENT = rawrecipientdataexportrequesttypesequence3.SENT
  lazy val SUPPRESSED = rawrecipientdataexportrequesttypesequence4.SUPPRESSED
  lazy val OPENS = rawrecipientdataexportrequesttypesequence4.OPENS
  lazy val CLICKS = rawrecipientdataexportrequesttypesequence4.CLICKS
  lazy val OPTINS = rawrecipientdataexportrequesttypesequence4.OPTINS
  lazy val OPTOUTS = rawrecipientdataexportrequesttypesequence4.OPTOUTS
  lazy val FORWARDS = rawrecipientdataexportrequesttypesequence4.FORWARDS
  lazy val ATTACHMENTS = rawrecipientdataexportrequesttypesequence4.ATTACHMENTS
  lazy val CONVERSIONS = rawrecipientdataexportrequesttypesequence4.CONVERSIONS
  lazy val CLICKSTREAMS = rawrecipientdataexportrequesttypesequence4.CLICKSTREAMS
  lazy val HARD_BOUNCES = rawrecipientdataexportrequesttypesequence4.HARD_BOUNCES
  lazy val SOFT_BOUNCES = rawrecipientdataexportrequesttypesequence5.SOFT_BOUNCES
  lazy val REPLY_ABUSE = rawrecipientdataexportrequesttypesequence5.REPLY_ABUSE
  lazy val REPLY_COA = rawrecipientdataexportrequesttypesequence5.REPLY_COA
  lazy val REPLY_OTHER = rawrecipientdataexportrequesttypesequence5.REPLY_OTHER
  lazy val MAIL_BLOCKS = rawrecipientdataexportrequesttypesequence5.MAIL_BLOCKS
  lazy val MAILING_RESTRICTIONS = rawrecipientdataexportrequesttypesequence5.MAILING_RESTRICTIONS
  lazy val SMS_ERROR = rawrecipientdataexportrequesttypesequence5.SMS_ERROR
  lazy val SMS_REJECT = rawrecipientdataexportrequesttypesequence5.SMS_REJECT
  lazy val SMS_OPTOUT = rawrecipientdataexportrequesttypesequence5.SMS_OPTOUT
  lazy val INCLUDE_SEEDS = rawrecipientdataexportrequesttypesequence5.INCLUDE_SEEDS
  lazy val INCLUDE_FORWARDS = rawrecipientdataexportrequesttypesequence6.INCLUDE_FORWARDS
  lazy val INCLUDE_INBOX_MONITORING = rawrecipientdataexportrequesttypesequence6.INCLUDE_INBOX_MONITORING
  lazy val CODED_TYPE_FIELDS = rawrecipientdataexportrequesttypesequence6.CODED_TYPE_FIELDS
  lazy val EXCLUDE_DELETED = rawrecipientdataexportrequesttypesequence6.EXCLUDE_DELETED
  lazy val COLUMNS = rawrecipientdataexportrequesttypesequence6.COLUMNS
}


case class RawRecipientDataExportRequestTypeSequence5(SOFT_BOUNCES: Option[String] = None,
  REPLY_ABUSE: Option[String] = None,
  REPLY_COA: Option[String] = None,
  REPLY_OTHER: Option[String] = None,
  MAIL_BLOCKS: Option[String] = None,
  MAILING_RESTRICTIONS: Option[String] = None,
  SMS_ERROR: Option[String] = None,
  SMS_REJECT: Option[String] = None,
  SMS_OPTOUT: Option[String] = None,
  INCLUDE_SEEDS: Option[String] = None)

case class RawRecipientDataExportRequestTypeSequence1(MAILING_ID: Option[Long] = None,
  REPORT_ID: Option[Long] = None,
  MAILING: Seq[silverpop.MultiMailingsElementType] = Nil,
  CAMPAIGN_ID: Option[Long] = None,
  LIST_ID: Option[Long] = None,
  INCLUDE_QUERIES: Option[String] = None,
  ALL_NON_EXPORTED: Option[String] = None,
  EVENT_DATE_START: Option[String] = None,
  EVENT_DATE_END: Option[String] = None,
  SEND_DATE_START: Option[String] = None)

case class RawRecipientDataExportRequestTypeSequence4(SUPPRESSED: Option[String] = None,
  OPENS: Option[String] = None,
  CLICKS: Option[String] = None,
  OPTINS: Option[String] = None,
  OPTOUTS: Option[String] = None,
  FORWARDS: Option[String] = None,
  ATTACHMENTS: Option[String] = None,
  CONVERSIONS: Option[String] = None,
  CLICKSTREAMS: Option[String] = None,
  HARD_BOUNCES: Option[String] = None)

case class RawRecipientDataExportRequestTypeSequence6(INCLUDE_FORWARDS: Option[String] = None,
  INCLUDE_INBOX_MONITORING: Option[String] = None,
  CODED_TYPE_FIELDS: Option[String] = None,
  EXCLUDE_DELETED: Option[String] = None,
  COLUMNS: Option[silverpop.ColumnsElementType] = None)

case class RawRecipientDataExportRequestTypeSequence2(SEND_DATE_END: Option[String] = None,
  EXPORT_FORMAT: Option[silverpop.EventExportFormat] = None,
  EXPORT_FILE_NAME: Option[String] = None,
  FILE_ENCODING: Option[silverpop.FileEncoding] = None,
  EMAIL: Option[String] = None,
  MOVE_TO_FTP: Option[String] = None,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SENT_MAILINGS: Option[String] = None,
  SENDING: Option[String] = None)

case class RawRecipientDataExportRequestTypeSequence3(OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  CAMPAIGN_SCRAPE_TEMPLATE: Option[String] = None,
  INCLUDE_TEST_MAILINGS: Option[String] = None,
  ALL_EVENT_TYPES: Option[String] = None,
  SENT: Option[String] = None)


case class GetSentMailingsForOrgRequestType(DATE_START: String,
  DATE_END: String,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SCHEDULED: Option[String] = None,
  SENT: Option[String] = None,
  SENDING: Option[String] = None,
  OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  CAMPAIGN_SCRAPE_TEMPLATE: Option[String] = None,
  INCLUDE_TAGS: Option[String] = None,
  EXCLUDE_ZERO_SENT: Option[String] = None)


case class GetAggregateTrackingForMailingRequestType(MAILING_ID: Long,
  REPORT_ID: Long,
  TOP_DOMAIN: Option[String] = None,
  INBOX_MONITORING: Option[String] = None,
  PER_CLICK: Option[String] = None)


case class GetAggregateTrackingForOrgRequestType(DATE_START: String,
  DATE_END: String,
  OPTIONALUSER: Option[String] = None,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SCHEDULED: Option[String] = None,
  SENT: Option[String] = None,
  SENDING: Option[String] = None,
  OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  TOP_DOMAIN: Option[String] = None,
  INBOX_MONITORING: Option[String] = None,
  PER_CLICK: Option[String] = None)


case class GetAggregateTrackingForUserRequestType(DATE_START: String,
  DATE_END: String,
  OPTIONALUSER: Option[String] = None,
  PRIVATE: Option[String] = None,
  SHARED: Option[String] = None,
  SCHEDULED: Option[String] = None,
  SENT: Option[String] = None,
  SENDING: Option[String] = None,
  OPTIN_CONFIRMATION: Option[String] = None,
  PROFILE_CONFIRMATION: Option[String] = None,
  AUTOMATED: Option[String] = None,
  CAMPAIGN_ACTIVE: Option[String] = None,
  CAMPAIGN_COMPLETED: Option[String] = None,
  CAMPAIGN_CANCELLED: Option[String] = None,
  TOP_DOMAIN: Option[String] = None,
  INBOX_MONITORING: Option[String] = None,
  PER_CLICK: Option[String] = None)


case class GetJobStatusRequestType(JOB_ID: Long)


case class DeleteJobRequestType(JOB_ID: Long)


case class TopDomainElementType(MailingId: Long,
  ReportId: Long,
  Domain: String,
  Sent: Int,
  Bounce: Int,
  Open: Int,
  Click: Int,
  Unsubscribe: Int,
  Conversion: Int,
  Conversion_Amount: Int,
  Reply_abuse: Int,
  Reply_mail_block: Int,
  Reply_mail_restriction: Int)


case class InboxMonitoringElementType(MailingId: Long,
  ReportId: Long,
  Domain: String,
  Sent: Int,
  Inbox: Int,
  Bulk: Int,
  NotReceived: Int)


case class ClicksElementType(MailingId: Long,
  ReportId: Long,
  LinkName: String,
  LinkURL: String,
  TotalHTML: Int,
  TotalAOL: Int,
  TotalWEB: Int,
  TotalTEXT: Int)


case class MailingElementType(mailingelementtypesequence1: silverpop.MailingElementTypeSequence1,
  mailingelementtypesequence2: silverpop.MailingElementTypeSequence2,
  mailingelementtypesequence3: silverpop.MailingElementTypeSequence3,
  mailingelementtypesequence4: silverpop.MailingElementTypeSequence4,
  mailingelementtypesequence5: silverpop.MailingElementTypeSequence5,
  mailingelementtypesequence6: silverpop.MailingElementTypeSequence6,
  mailingelementtypesequence7: silverpop.MailingElementTypeSequence7) {
  lazy val MailingId = mailingelementtypesequence1.MailingId
  lazy val ReportId = mailingelementtypesequence1.ReportId
  lazy val ScheduledTS = mailingelementtypesequence1.ScheduledTS
  lazy val MailingName = mailingelementtypesequence1.MailingName
  lazy val ListName = mailingelementtypesequence1.ListName
  lazy val ListId = mailingelementtypesequence1.ListId
  lazy val ParentListId = mailingelementtypesequence1.ParentListId
  lazy val UserName = mailingelementtypesequence1.UserName
  lazy val SentTS = mailingelementtypesequence1.SentTS
  lazy val SentDateTime = mailingelementtypesequence1.SentDateTime
  lazy val NumSent = mailingelementtypesequence2.NumSent
  lazy val Subject = mailingelementtypesequence2.Subject
  lazy val Visibility = mailingelementtypesequence2.Visibility
  lazy val QueryId = mailingelementtypesequence2.QueryId
  lazy val QueryName = mailingelementtypesequence2.QueryName
  lazy val ContactListId = mailingelementtypesequence2.ContactListId
  lazy val ContactListName = mailingelementtypesequence2.ContactListName
  lazy val Tags = mailingelementtypesequence2.Tags
  lazy val NumSeeds = mailingelementtypesequence2.NumSeeds
  lazy val NumSuppressed = mailingelementtypesequence2.NumSuppressed
  lazy val NumInboxMonitored = mailingelementtypesequence3.NumInboxMonitored
  lazy val NumBounceHard = mailingelementtypesequence3.NumBounceHard
  lazy val NumBounceSoft = mailingelementtypesequence3.NumBounceSoft
  lazy val NumUniqueOpen = mailingelementtypesequence3.NumUniqueOpen
  lazy val NumGrossOpen = mailingelementtypesequence3.NumGrossOpen
  lazy val NumUniqueClick = mailingelementtypesequence3.NumUniqueClick
  lazy val NumGrossClick = mailingelementtypesequence3.NumGrossClick
  lazy val NumUniqueAttach = mailingelementtypesequence3.NumUniqueAttach
  lazy val NumGrossAttach = mailingelementtypesequence3.NumGrossAttach
  lazy val NumUniqueClickStreams = mailingelementtypesequence3.NumUniqueClickStreams
  lazy val NumGrossClickStreams = mailingelementtypesequence4.NumGrossClickStreams
  lazy val NumUniqueMedia = mailingelementtypesequence4.NumUniqueMedia
  lazy val NumGrossMedia = mailingelementtypesequence4.NumGrossMedia
  lazy val NumGrossAbuse = mailingelementtypesequence4.NumGrossAbuse
  lazy val NumGrossChangeAddress = mailingelementtypesequence4.NumGrossChangeAddress
  lazy val NumGrossMailBlock = mailingelementtypesequence4.NumGrossMailBlock
  lazy val NumGrossMailRestriction = mailingelementtypesequence4.NumGrossMailRestriction
  lazy val NumGrossOther = mailingelementtypesequence4.NumGrossOther
  lazy val NumConversions = mailingelementtypesequence4.NumConversions
  lazy val NumConversionAmount = mailingelementtypesequence4.NumConversionAmount
  lazy val NumBounceHardFwd = mailingelementtypesequence5.NumBounceHardFwd
  lazy val NumBounceSoftFwd = mailingelementtypesequence5.NumBounceSoftFwd
  lazy val NumConversionAmountFwd = mailingelementtypesequence5.NumConversionAmountFwd
  lazy val NumAttachOpenFwd = mailingelementtypesequence5.NumAttachOpenFwd
  lazy val NumClickFwd = mailingelementtypesequence5.NumClickFwd
  lazy val NumUniqueForwardFwd = mailingelementtypesequence5.NumUniqueForwardFwd
  lazy val NumGrossForwardFwd = mailingelementtypesequence5.NumGrossForwardFwd
  lazy val NumUniqueConversionsFwd = mailingelementtypesequence5.NumUniqueConversionsFwd
  lazy val NumGrossConversionsFwd = mailingelementtypesequence5.NumGrossConversionsFwd
  lazy val NumUniqueClickstreamFwd = mailingelementtypesequence5.NumUniqueClickstreamFwd
  lazy val NumGrossClickstreamFwd = mailingelementtypesequence6.NumGrossClickstreamFwd
  lazy val NumUniqueClickFwd = mailingelementtypesequence6.NumUniqueClickFwd
  lazy val NumGrossClickFwd = mailingelementtypesequence6.NumGrossClickFwd
  lazy val NumUniqueAttachOpenFwd = mailingelementtypesequence6.NumUniqueAttachOpenFwd
  lazy val NumGrossAttachOpenFwd = mailingelementtypesequence6.NumGrossAttachOpenFwd
  lazy val NumUniqueMediaFwd = mailingelementtypesequence6.NumUniqueMediaFwd
  lazy val NumGrossMediaFwd = mailingelementtypesequence6.NumGrossMediaFwd
  lazy val NumUniqueOpenFwd = mailingelementtypesequence6.NumUniqueOpenFwd
  lazy val NumGrossOpenFwd = mailingelementtypesequence6.NumGrossOpenFwd
  lazy val NumAbuseFwd = mailingelementtypesequence6.NumAbuseFwd
  lazy val NumChangeAddressFwd = mailingelementtypesequence7.NumChangeAddressFwd
  lazy val NumMailRestrictionFwd = mailingelementtypesequence7.NumMailRestrictionFwd
  lazy val NumMailBlockFwd = mailingelementtypesequence7.NumMailBlockFwd
  lazy val NumOtherFwd = mailingelementtypesequence7.NumOtherFwd
  lazy val NumSuppressedFwd = mailingelementtypesequence7.NumSuppressedFwd
}


case class MailingElementTypeSequence6(NumGrossClickstreamFwd: Option[Int] = None,
  NumUniqueClickFwd: Option[Int] = None,
  NumGrossClickFwd: Option[Int] = None,
  NumUniqueAttachOpenFwd: Option[Int] = None,
  NumGrossAttachOpenFwd: Option[Int] = None,
  NumUniqueMediaFwd: Option[Int] = None,
  NumGrossMediaFwd: Option[Int] = None,
  NumUniqueOpenFwd: Option[Int] = None,
  NumGrossOpenFwd: Option[Int] = None,
  NumAbuseFwd: Option[Int] = None)

case class MailingElementTypeSequence2(NumSent: Option[Int] = None,
  Subject: Option[String] = None,
  Visibility: Option[silverpop.PrivateShared] = None,
  QueryId: Option[Long] = None,
  QueryName: Option[String] = None,
  ContactListId: Option[Long] = None,
  ContactListName: Option[String] = None,
  Tags: Option[silverpop.TagsElementType] = None,
  NumSeeds: Option[Int] = None,
  NumSuppressed: Option[Int] = None)

case class MailingElementTypeSequence3(NumInboxMonitored: Option[Int] = None,
  NumBounceHard: Option[Int] = None,
  NumBounceSoft: Option[Int] = None,
  NumUniqueOpen: Option[Int] = None,
  NumGrossOpen: Option[Int] = None,
  NumUniqueClick: Option[Int] = None,
  NumGrossClick: Option[Int] = None,
  NumUniqueAttach: Option[Int] = None,
  NumGrossAttach: Option[Int] = None,
  NumUniqueClickStreams: Option[Int] = None)

case class MailingElementTypeSequence7(NumChangeAddressFwd: Option[Int] = None,
  NumMailRestrictionFwd: Option[Int] = None,
  NumMailBlockFwd: Option[Int] = None,
  NumOtherFwd: Option[Int] = None,
  NumSuppressedFwd: Option[Int] = None)

case class MailingElementTypeSequence5(NumBounceHardFwd: Option[Int] = None,
  NumBounceSoftFwd: Option[Int] = None,
  NumConversionAmountFwd: Option[Int] = None,
  NumAttachOpenFwd: Option[Int] = None,
  NumClickFwd: Option[Int] = None,
  NumUniqueForwardFwd: Option[Int] = None,
  NumGrossForwardFwd: Option[Int] = None,
  NumUniqueConversionsFwd: Option[Int] = None,
  NumGrossConversionsFwd: Option[Int] = None,
  NumUniqueClickstreamFwd: Option[Int] = None)

case class MailingElementTypeSequence1(MailingId: Option[Long] = None,
  ReportId: Option[Long] = None,
  ScheduledTS: Option[String] = None,
  MailingName: Option[String] = None,
  ListName: Option[String] = None,
  ListId: Option[Long] = None,
  ParentListId: Option[Long] = None,
  UserName: Option[String] = None,
  SentTS: Option[String] = None,
  SentDateTime: Option[String] = None)

case class MailingElementTypeSequence4(NumGrossClickStreams: Option[Int] = None,
  NumUniqueMedia: Option[Int] = None,
  NumGrossMedia: Option[Int] = None,
  NumGrossAbuse: Option[Int] = None,
  NumGrossChangeAddress: Option[Int] = None,
  NumGrossMailBlock: Option[Int] = None,
  NumGrossMailRestriction: Option[Int] = None,
  NumGrossOther: Option[Int] = None,
  NumConversions: Option[Int] = None,
  NumConversionAmount: Option[Int] = None)


case class TagsElementType(Tag: String*)


case class TrackingMetricMailingElementType(JOB_ID: Option[Long] = None,
  MAILING_ID: Option[Long] = None,
  FILE_PATH: Option[String] = None,
  SENT_DATE: Option[String] = None)


case class MultiMailingsElementType(MAILING_ID: Option[Long] = None,
  REPORT_ID: Option[Long] = None)


case class ParametersElementType(PARAMETER: silverpop.ParameterElementType*)


case class ParameterElementType(NAME: Option[String] = None,
  VALUE: Option[String] = None)


case class ReportingResponseType(SUCCESS: Boolean,
  Fault: Option[silverpop.FaultTypeType] = None,
  MAILING: Option[silverpop.TrackingMetricMailingElementType] = None,
  Mailing: Seq[silverpop.MailingElementType] = Nil,
  JOB_ID: Option[Long] = None,
  JOB_STATUS: Option[silverpop.JobStatus] = None,
  JOB_DESCRIPTION: Option[String] = None,
  PARAMETERS: Option[silverpop.ParametersElementType] = None,
  TopDomains: Option[silverpop.TopDomainsElementType] = None,
  InboxMonitored: Option[silverpop.InboxMonitoredElementType] = None,
  Clicks: Option[silverpop.ClicksElementType] = None)


case class TopDomainsElementType(TopDomain: silverpop.TopDomainElementType*)


case class InboxMonitoredElementType(InboxMonitoring: silverpop.InboxMonitoringElementType*)

