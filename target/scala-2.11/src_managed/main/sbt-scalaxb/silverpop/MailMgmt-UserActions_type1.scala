// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package silverpop
trait Visibility

object Visibility {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Visibility = value match {
    case "0" => Number0Value
    case "1" => Number1Value

  }
}

case object Number0Value extends Visibility { override def toString = "0" }
case object Number1Value extends Visibility { override def toString = "1" }

trait TemplateVisibility

object TemplateVisibility {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TemplateVisibility = value match {
    case "Shared" => SharedValue
    case "Private" => PrivateValue

  }
}

case object SharedValue extends TemplateVisibility { override def toString = "Shared" }
case object PrivateValue extends TemplateVisibility { override def toString = "Private" }

trait ExpressionType

object ExpressionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ExpressionType = value match {
    case "TE" => TE
    case "NE" => NE
    case "DE" => DE

  }
}

case object TE extends ExpressionType { override def toString = "TE" }
case object NE extends ExpressionType { override def toString = "NE" }
case object DE extends ExpressionType { override def toString = "DE" }

trait Operators

object Operators {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Operators = value match {
    case "!=" => U33u61
    case "<=" => U60u61
    case ">=" => U62u61
    case "<" => U60
    case ">" => U62
    case "=" => U61
    case "IS NOT null" => ISNOTnull
    case "IS null" => ISnull
    case "LIKE" => LIKE
    case "NOT like" => NOTlike
    case "IN" => IN
    case "NOT in" => NOTin
    case "BETWEEN" => BETWEEN

  }
}

case object U33u61 extends Operators { override def toString = "!=" }
case object U60u61 extends Operators { override def toString = "<=" }
case object U62u61 extends Operators { override def toString = ">=" }
case object U60 extends Operators { override def toString = "<" }
case object U62 extends Operators { override def toString = ">" }
case object U61 extends Operators { override def toString = "=" }
case object ISNOTnull extends Operators { override def toString = "IS NOT null" }
case object ISnull extends Operators { override def toString = "IS null" }
case object LIKE extends Operators { override def toString = "LIKE" }
case object NOTlike extends Operators { override def toString = "NOT like" }
case object IN extends Operators { override def toString = "IN" }
case object NOTin extends Operators { override def toString = "NOT in" }
case object BETWEEN extends Operators { override def toString = "BETWEEN" }

trait AndOr

object AndOr {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AndOr = value match {
    case "AND" => AND
    case "OR" => OR

  }
}

case object AND extends AndOr { override def toString = "AND" }
case object OR extends AndOr { override def toString = "OR" }

trait ContentAreaType

object ContentAreaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ContentAreaType = value match {
    case "Body-HTML" => Bodyu45HTML
    case "Body-Text" => Bodyu45Text
    case "Body-AOL" => Bodyu45AOL
    case "Subject" => Subject
    case "From" => From
    case "From-Name" => Fromu45Name

  }
}

case object Bodyu45HTML extends ContentAreaType { override def toString = "Body-HTML" }
case object Bodyu45Text extends ContentAreaType { override def toString = "Body-Text" }
case object Bodyu45AOL extends ContentAreaType { override def toString = "Body-AOL" }
case object Subject extends ContentAreaType { override def toString = "Subject" }
case object From extends ContentAreaType { override def toString = "From" }
case object Fromu45Name extends ContentAreaType { override def toString = "From-Name" }

trait SendTimeOptimization

object SendTimeOptimization {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SendTimeOptimization = value match {
    case "NONE" => NONE
    case "SEND_24HRS" => SEND_24HRS
    case "SEND_WEEK" => SEND_WEEK

  }
}

case object NONE extends SendTimeOptimization { override def toString = "NONE" }
case object SEND_24HRS extends SendTimeOptimization { override def toString = "SEND_24HRS" }
case object SEND_WEEK extends SendTimeOptimization { override def toString = "SEND_WEEK" }


case class FaultErrorTypeType2(faulterrortypetype2sequence1: Option[silverpop.FaultErrorTypeType2Sequence1] = None)

case class FaultErrorTypeType2Sequence1(errorid: Option[String] = None,
  module: Option[String] = None,
  classValue: Option[String] = None,
  method: Option[String] = None)


case class FaultDetailTypeType2(faultdetailtypetype2sequence1: Option[silverpop.FaultDetailTypeType2Sequence1] = None)

case class FaultDetailTypeType2Sequence1(error: Option[silverpop.FaultErrorTypeType2] = None)

case class FaultTypeType2(faulttypetype2sequence1: Option[silverpop.FaultTypeType2Sequence1] = None)

case class FaultTypeType2Sequence1(Request: Option[String] = None,
  FaultCode: Option[String] = None,
  FaultString: Option[String] = None,
  detail: Option[silverpop.FaultDetailTypeType2] = None)


case class ScheduleMailingRequestType(TEMPLATE_ID: Long,
  LIST_ID: Long,
  MAILING_NAME: String,
  SEND_HTML: Option[String] = None,
  SEND_AOL: Option[String] = None,
  SEND_TEXT: Option[String] = None,
  SUBJECT: Option[String] = None,
  FROM_NAME: Option[String] = None,
  FROM_ADDRESS: Option[String] = None,
  REPLY_TO: Option[String] = None,
  VISIBILITY: silverpop.Visibility,
  SCHEDULED: String,
  INBOX_MONITOR: Option[String] = None,
  SEND_TIME_OPTIMIZATION: Option[silverpop.SendTimeOptimization] = None,
  WA_MAILINGLEVEL_CODE: Option[String] = None,
  SUPPRESSION_LISTS: Option[silverpop.SuppressionListsElementType] = None,
  SUBSTITUTIONS: Option[silverpop.SubstitutionsElementType] = None)


case class PreviewMailingRequestType(MailingId: Long,
  RecipientEmail: Option[String] = None,
  CRM_SYNC_ID: Option[String] = None)


case class MailMgmtUserActionsResponseType(SUCCESS: Option[Boolean] = None,
  Fault: Option[silverpop.FaultTypeType2] = None,
  MAILING_ID: Option[Long] = None,
  RULESET_ID: Option[Long] = None,
  JOB_ID: Option[Long] = None,
  FILE_NAME: Option[String] = None,
  RULESET: Seq[silverpop.RulesetElementType] = Nil,
  FILE_PATH: Option[String] = None,
  MAILING_TEMPLATE: Seq[silverpop.MailingTemplateElementType] = Nil,
  HTMLBody: Option[String] = None,
  AOLBody: Option[String] = None,
  TextBody: Option[String] = None,
  SpamScore: Option[String] = None)


case class SuppressionListsElementType(SUPPRESSION_LIST_ID: Long*)


case class SubstitutionsElementType(SUBSTITUTION: silverpop.SubstitutionElementType*)


case class SubstitutionElementType(NAME: Option[String] = None,
  VALUE: Option[String] = None)


case class AddDCRulesetRequestType(LIST_ID: Long,
  RULESET_NAME: String,
  MAILING_ID: Option[Long] = None,
  CONTENT_AREAS: Option[silverpop.ContentAreasElementType] = None,
  RULES: Option[silverpop.RulesElementType] = None)


case class ContentAreasElementType(CONTENT_AREA: silverpop.ContentAreaElementType*)


case class ContentAreaElementType(DEFAULT_CONTENT: silverpop.DefaultContentElementType,
  typeValue: silverpop.ContentAreaType,
  name: String)


case class DefaultContentElementType(value: String,
  name: String)


case class RulesElementType(RULE: silverpop.RuleElementType*)


case class RuleElementType(RULE_NAME: String,
  PRIORITY: Int,
  CRITERIA: Option[silverpop.CriteriaElementType] = None,
  CONTENTS: Option[silverpop.ContentsElementType] = None)


case class CriteriaElementType(EXPRESSION: silverpop.ExpressionElementType*)


case class ExpressionElementType(AND_OR: Option[silverpop.AndOr] = None,
  LEFT_PARENS: Option[String] = None,
  TYPE: silverpop.ExpressionType,
  COLUMN_NAME: String,
  OPERATORS: silverpop.Operators,
  VALUES: String,
  RIGHT_PARENS: Option[String] = None)


case class ContentsElementType(CONTENT: silverpop.ContentElementType*)


case class ContentElementType(value: String,
  content_area: Option[String] = None,
  name: Option[String] = None)


case class ImportDCRulesetRequestType(FILE_NAME: String,
  LIST_ID: Long,
  MAILING_ID: Option[Long] = None,
  RULESET_ID: Option[Long] = None)


case class ExportDCRulesetRequestType(RULESET_ID: Long,
  MOVE_TO_FTP: Option[String] = None)


case class ListDCRulesetsForMailingRequestType(MAILING_ID: Long)


case class RulesetElementType(RULESET_ID: Option[Long] = None,
  LIST_ID: Option[Long] = None,
  RULESET_NAME: Option[String] = None,
  CONTENT_AREAS: silverpop.ContentAreasElementType,
  RULES: Option[silverpop.RulesElementType] = None)


case class GetDCRulesetRequestType(RULESET_ID: Long)


case class ReplaceDCRulesetRequestType(RULESET_ID: Long,
  CONTENT_AREAS: Option[silverpop.ContentAreasElementType] = None,
  RULES: Option[silverpop.RulesElementType] = None)


case class ValidateDCMailingRulesetType(MAILING_ID: Long)


case class DeleteDCRulesetRequestType(RULESET_ID: Long)


case class ExportMailingTemplateRequestType(TEMPLATE_ID: Long,
  ADD_TO_STORED_FILES: Option[String] = None)


case class GetMailingTemplatesRequestType(VISIBILITY: silverpop.Visibility,
  LAST_MODIFIED_START_DATE: Option[String] = None,
  LAST_MODIFIED_END_DATE: Option[String] = None)


case class MailingTemplateElementType(MAILING_ID: Long,
  MAILING_NAME: String,
  SUBJECT: Option[String] = None,
  LAST_MODIFIED: String,
  VISIBILITY: silverpop.TemplateVisibility,
  USER_ID: String,
  FLAGGED_FOR_BACKUP: String,
  ALLOW_CRM_BLOCK: Option[String] = None)

